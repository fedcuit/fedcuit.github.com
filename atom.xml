<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Feng erdong's Blog]]></title>
  <link href="http://fedcuit.github.com/atom.xml" rel="self"/>
  <link href="http://fedcuit.github.com/"/>
  <updated>2013-07-10T23:53:39+08:00</updated>
  <id>http://fedcuit.github.com/</id>
  <author>
    <name><![CDATA[Feng erdong]]></name>
    <email><![CDATA[fedcuit@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Run headless selenium in Jenkins]]></title>
    <link href="http://fedcuit.github.com/blog/2013/07/10/run-headless-selenium-in-jenkins/"/>
    <updated>2013-07-10T23:28:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2013/07/10/run-headless-selenium-in-jenkins</id>
    <content type="html"><![CDATA[<ul>
<li>Install vnc4server</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install vnc4server
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Install Xvnc plugin for Jenkins</li>
<li>Switch to jenkins user and set password for vnc4server</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>su - jenkins
</span><span class='line'><span class="nv">$ </span>vncserver
</span><span class='line'>&gt; Enter a password, and verify it
</span><span class='line'><span class="nv">$ </span>vncserver -kill :1 <span class="c"># or whichever display the vncserver output mentioned</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Config Jenkins job to run in headless mode by check &#8220;Run Xvnc during build&#8221;</p></li>
<li><p>Watch the running job</p>

<ul>
<li>open any VNC client</li>
<li>connect to your.server:59xx (xx is the display number output on the Jenkins console for the running job)</li>
<li>enter the password you set for vnc4server before</li>
</ul>
</li>
</ul>


<p>This article is based on <a href="http://rapaul.com/2011/06/05/zero-to-headless-browser-tests-jenkins/">From Zero to Headless Browser Tests in Jenkins</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Word process in Linux -- GREP]]></title>
    <link href="http://fedcuit.github.com/blog/2013/07/10/word-process-in-linux/"/>
    <updated>2013-07-10T00:00:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2013/07/10/word-process-in-linux</id>
    <content type="html"><![CDATA[<ul>
<li>grep by multi words</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat file.txt | grep <span class="s2">&quot;word1\|word2\|word3&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>grep line which doesn&#8217;t contains word</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat file.txt | grep -v word
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>show n lines above and under greped line</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat file.txt | grep -20 word
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Using Gradle]]></title>
    <link href="http://fedcuit.github.com/blog/2013/07/07/testing-using-gradle/"/>
    <updated>2013-07-07T19:29:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2013/07/07/testing-using-gradle</id>
    <content type="html"><![CDATA[<ul>
<li>Run a single unit test</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">gradle</span> <span class="n">test</span> <span class="o">-</span><span class="n">Dtest</span><span class="o">.</span><span class="na">single</span><span class="o">=</span><span class="n">TestClassName</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Run test in debug mode</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">gradle</span> <span class="n">test</span> <span class="o">-</span><span class="n">Dtest</span><span class="o">.</span><span class="na">debug</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mockito Advanced Usage]]></title>
    <link href="http://fedcuit.github.com/blog/2013/06/17/mockito-intruduce/"/>
    <updated>2013-06-17T22:32:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2013/06/17/mockito-intruduce</id>
    <content type="html"><![CDATA[<ul>
<li>Return different values at each call</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">when</span><span class="o">(</span><span class="n">mockFoo</span><span class="o">.</span><span class="na">someMethod</span><span class="o">())</span>
</span><span class='line'>          <span class="o">.</span><span class="na">thenReturn</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="na">thenReturn</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="na">thenReturn</span><span class="o">(-</span><span class="mi">1</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Inject dependency in Mockito</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">InjectMocksTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Mock</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">EJBBeanInjectedByContainerInRealCode</span> <span class="n">dependencyBean</span><span class="o">;</span>
</span><span class='line'>  <span class="c1">//Create a mock object with type EJBBeanInjectedByContainerInRealCode and inject it to a spy object.</span>
</span><span class='line'>  <span class="c1">//Mockito will try to inject this dependency to target object in this order: Constructor, Property, Field.</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@InjectMocks</span>
</span><span class='line'>  <span class="nd">@Spy</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">MyEJBBean</span> <span class="n">ejbBean</span><span class="o">;</span>
</span><span class='line'>  <span class="c1">//Create a spy object of MyEJBBean, all fields annotated with @Mock with injected into this spy object.</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Before</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">initMocks</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">//This is required to create all the mock objects and spy objects declared in annotation way.</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Test</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testShouldXXX</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">when</span><span class="o">(</span><span class="n">dependencyBean</span><span class="o">.</span><span class="na">findSomeDataFromDB</span><span class="o">(</span><span class="n">anyString</span><span class="o">(),</span> <span class="n">anyString</span><span class="o">(),</span> <span class="n">anyString</span><span class="o">())).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">anyList</span><span class="o">());</span>
</span><span class='line'>    <span class="c1">//Mock the behavior the the injected dependency.</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Object</span><span class="o">[]</span> <span class="n">objects</span> <span class="o">=</span> <span class="n">ejbBean</span><span class="o">.</span><span class="na">myMethod</span><span class="o">();</span>
</span><span class='line'>    <span class="c1">//Call the real method on the spy object.</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assertThat</span><span class="o">(</span><span class="n">objects</span><span class="o">).</span><span class="na">isNotEmpty</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Verify method call</h2>

<ul>
<li>Verify method called with expected arguments</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ArgumentCaptor</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">argument</span> <span class="o">=</span> <span class="n">ArgumentCaptor</span><span class="o">.</span><span class="na">forClass</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">verify</span><span class="o">(</span><span class="n">errors</span><span class="o">,</span> <span class="n">atLeastOnce</span><span class="o">()).</span><span class="na">add</span><span class="o">(</span><span class="n">argument</span><span class="o">.</span><span class="na">capture</span><span class="o">(),</span> <span class="n">any</span><span class="o">(</span><span class="n">ActionMessage</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'><span class="c1">//Verify errors.add(_, _) called with expected arguements, mockito will store captured arguemnt into the ArgumentCaptor object.</span>
</span><span class='line'>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">values</span> <span class="o">=</span> <span class="n">argument</span><span class="o">.</span><span class="na">getAllValues</span><span class="o">();</span>
</span><span class='line'><span class="c1">//If method called only once, use getValue() to get the value passed in, if caleed multi times, use getAllVales() to get value list.</span>
</span><span class='line'>
</span><span class='line'><span class="n">assertTrue</span><span class="o">(</span><span class="n">values</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">&quot;exception.message&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">assertTrue</span><span class="o">(</span><span class="n">values</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">&quot;exception.detail&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Verify method never called</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">verify</span><span class="o">(</span><span class="n">someObject</span><span class="o">,</span> <span class="n">never</span><span class="o">()).</span><span class="na">someMethod</span><span class="o">(</span><span class="n">anyString</span><span class="o">(),</span> <span class="n">anyString</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FAQ of selenium]]></title>
    <link href="http://fedcuit.github.com/blog/2013/06/03/selenium-skills/"/>
    <updated>2013-06-03T22:41:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2013/06/03/selenium-skills</id>
    <content type="html"><![CDATA[<ul>
<li>How to simulate press ENTER key</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@And</span><span class="o">(</span><span class="s">&quot;^i press enter key$&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">i_press_enter_key</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">driver</span><span class="o">.</span><span class="na">findElement</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">id</span><span class="o">(</span><span class="s">&quot;gbqfq&quot;</span><span class="o">)).</span><span class="na">sendKeys</span><span class="o">(</span><span class="n">Keys</span><span class="o">.</span><span class="na">ENTER</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>How can wait until a element display or clickable.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Then</span><span class="o">(</span><span class="s">&quot;^i should see at least (\\d+) results related to my search keyword$&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">i_should_see_at_least_results_related_to_my_search_keyword</span><span class="o">(</span><span class="kt">int</span> <span class="n">amount</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">WebDriverWait</span> <span class="n">wait</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WebDriverWait</span><span class="o">(</span><span class="n">driver</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span>
</span><span class='line'>  <span class="n">wait</span><span class="o">.</span><span class="na">until</span><span class="o">(</span><span class="n">ExpectedConditions</span><span class="o">.</span><span class="na">elementToBeClickable</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">id</span><span class="o">(</span><span class="s">&quot;pnnext&quot;</span><span class="o">)));</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">List</span><span class="o">&lt;</span><span class="n">WebElement</span><span class="o">&gt;</span> <span class="n">results</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElements</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">cssSelector</span><span class="o">(</span><span class="s">&quot;li.g&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">assertThat</span><span class="o">(</span><span class="n">results</span><span class="o">.</span><span class="na">size</span><span class="o">()).</span><span class="na">isGreaterThan</span><span class="o">(</span><span class="n">amount</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">resultTexts</span> <span class="o">=</span> <span class="n">Lambda</span><span class="o">.</span><span class="na">extract</span><span class="o">(</span><span class="n">results</span><span class="o">,</span> <span class="n">on</span><span class="o">(</span><span class="n">WebElement</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">getText</span><span class="o">());</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">text</span> <span class="o">:</span> <span class="n">resultTexts</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">assertThat</span><span class="o">(</span><span class="n">text</span><span class="o">).</span><span class="na">containsIgnoringCase</span><span class="o">(</span><span class="n">keyword</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cucumber JVM]]></title>
    <link href="http://fedcuit.github.com/blog/2013/06/01/cucumber-jvm/"/>
    <updated>2013-06-01T18:59:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2013/06/01/cucumber-jvm</id>
    <content type="html"><![CDATA[<h2>Cucumber-JVM command line interface</h2>

<p>Usage: java cucumber.api.cli.Main [options] [ [FILE|DIR][:LINE[:LINE]*] ]+</p>

<p>Options:</p>

<ul>
<li><code>-g</code>, &#8211;glue PATH                    Where glue code (step definitions and hooks) is loaded from.</li>
<li><code>-f</code>, &#8211;format FORMAT[:PATH_OR_URL]  How to format results. Goes to STDOUT unless PATH_OR_URL is specified.
 Available formats: junit, html, pretty, progress, json, json-pretty.</li>
<li><code>-t</code>, &#8211;tags TAG_EXPRESSION          Only run scenarios tagged with tags matching TAG_EXPRESSION.</li>
<li><code>-n,</code> &#8211;name REGEXP                  Only run scenarios whose names match REGEXP.</li>
<li><code>-d</code>, &#8211;[no-]-dry-run                Skip execution of glue code.</li>
<li><code>-m</code>, &#8211;[no-]-monochrome             Don&#8217;t colour terminal output.</li>
<li><code>-s</code>, &#8211;[no-]-strict                 Treat undefined and pending steps as errors.</li>
<li><code>--dotcucumber</code> PATH_OR_URL      Where to write out runtime information. PATH_OR_URL can be a file system
  path or a URL.</li>
<li><code>-v</code>, &#8211;version                      Print version.</li>
<li><code>-h</code>, &#8211;help                         You&#8217;re looking at it.</li>
</ul>


<h2>IDE support</h2>

<p>Be able to run *.feature files directly without any configuration in IntelliJ, you should put feature files as the same package structure as glue code.</p>

<p>Like:</p>

<p>&#8211;src
  &#8211;test</p>

<pre><code>--java
  --com
    --cukes
      --XXXStepdefs.java
      --YYYStepdefs.java
--resources
  --com
    --cukes
      --features
        --XXX.feature
        --YYY.feature
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Useful gradle configuration]]></title>
    <link href="http://fedcuit.github.com/blog/2013/05/31/useful-gradle-config/"/>
    <updated>2013-05-31T21:56:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2013/05/31/useful-gradle-config</id>
    <content type="html"><![CDATA[<h1>Basic configuration</h1>

<ul>
<li>Must have: <code>java plugin</code>, <code>maven repo</code>, <code>dependencies</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">testCompile</span> <span class="s1">&#39;info.cukes:cucumber-java:1.1.3&#39;</span><span class="err">\</span>
</span><span class='line'>    <span class="o">,</span> <span class="s1">&#39;info.cukes:cucumber-junit:1.1.3&#39;</span><span class="err">\</span>
</span><span class='line'>    <span class="o">,</span> <span class="s1">&#39;junit:junit:4.11&#39;</span><span class="err">\</span>
</span><span class='line'>    <span class="o">,</span> <span class="s1">&#39;org.seleniumhq.selenium:selenium-java:2.32.0&#39;</span><span class="err">\</span>
</span><span class='line'>    <span class="o">,</span> <span class="s1">&#39;org.easytesting:fest-assert:1.4&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Enable to run cucumber (with selenium)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">configurations</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">cucumberRuntime</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">extendsFrom</span> <span class="n">testRuntime</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="nf">cucumber</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">dependsOn</span> <span class="n">assemble</span><span class="o">,</span> <span class="n">compileTestJava</span>
</span><span class='line'>    <span class="n">doLast</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">javaexec</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">main</span> <span class="o">=</span> <span class="s2">&quot;cucumber.api.cli.Main&quot;</span>
</span><span class='line'>          <span class="n">jvmArgs</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;-Dwebdriver.chrome.driver=/Users/edfeng/Downloads/chromedriver&quot;</span><span class="o">]</span>
</span><span class='line'>          <span class="c1">//Must set if you want to use chrome webdriver</span>
</span><span class='line'>          <span class="n">classpath</span> <span class="o">=</span> <span class="n">configurations</span><span class="o">.</span><span class="na">cucumberRuntime</span> <span class="o">+</span> <span class="n">sourceSets</span><span class="o">.</span><span class="na">main</span><span class="o">.</span><span class="na">output</span> <span class="o">+</span> <span class="n">sourceSets</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">output</span>
</span><span class='line'>          <span class="n">args</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;-g&quot;</span><span class="o">,</span> <span class="s2">&quot;gradle.cucumber&quot;</span><span class="o">,</span> <span class="s2">&quot;src/test/resources&quot;</span><span class="o">]</span>
</span><span class='line'>          <span class="c1">// 1. must set package name of glue code(where steps are defined). 2. must set directory of feature files.</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Advanced configuration</h1>

<ul>
<li>Create gradle based project from template</li>
</ul>


<p>Simply add the following to your <code>~/.gradle/init.gradle</code> script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'>  <span class="n">gradle</span><span class="o">.</span><span class="na">beforeProject</span> <span class="o">{</span> <span class="n">prj</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">prj</span><span class="o">.</span><span class="na">apply</span> <span class="nl">from:</span> <span class="s1">&#39;http://www.tellurianring.com/projects/gradle-plugins/gradle-templates/apply.groovy&#39;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Type <code>gradle tasks</code> in any place where you want to create a gradle project, choose one from <code>Template Tasks</code>.</p>

<ul>
<li>Show dependencies <code>gradle dependencies</code></li>
<li>Specify source and test folders.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">sourceSets</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">main</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">java</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">srcDir</span> <span class="s1">&#39;mysubfolder/src/main/java&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">resources</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">srcDir</span> <span class="s1">&#39;mysubfolder/src/main/resources&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">test</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">java</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">srcDir</span> <span class="s1">&#39;mysubfolder/src/test/java&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">resources</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">srcDir</span> <span class="s1">&#39;mysubfolder/src/test/resources&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Configue dependencies using local jar files</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">compile</span> <span class="nf">fileTree</span> <span class="o">(</span><span class="nl">dir:</span> <span class="s1">&#39;file:/home/edfeng/somedir&#39;</span><span class="o">,</span> <span class="nl">includes:</span> <span class="o">[</span><span class="s1">&#39;*.jar&#39;</span><span class="o">])</span>
</span><span class='line'>  <span class="n">testCompile</span> <span class="nf">fileTree</span> <span class="o">(</span><span class="nl">dir:</span> <span class="s1">&#39;file:../../somedir&#39;</span><span class="o">,</span> <span class="nl">includes:</span> <span class="o">[</span><span class="s1">&#39;ViewController.jar&#39;</span><span class="o">])</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Show all rumtime dependencies(This can also print out local libaries)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">task</span> <span class="nf">printAllDependencies</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">configurations</span><span class="o">.</span><span class="na">runtime</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span> <span class="n">File</span> <span class="n">f</span> <span class="o">-&gt;</span> <span class="n">println</span> <span class="n">f</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu Configuration]]></title>
    <link href="http://fedcuit.github.com/blog/2013/05/27/ubuntu-configuration/"/>
    <updated>2013-05-27T21:04:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2013/05/27/ubuntu-configuration</id>
    <content type="html"><![CDATA[<p><strong>apt-get</strong></p>

<ul>
<li>Setup proxy for apt-get</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo gedit /etc/apt/apt.conf <span class="c">#This is a new file</span>
</span></code></pre></td></tr></table></div></figure>


<p>add <code>Acquire::http::Proxy "http://username:password@proxyhost:port/"</code> to this file</p>

<p><strong>Gnome desktop</strong></p>

<ul>
<li>Create application shortcut</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  sudo apt-get install --no-install-recommends gnome-panel
</span><span class='line'>  gnome-desktop-item-edit ~/Desktop/ --create-new
</span></code></pre></td></tr></table></div></figure>


<p><strong>Setup ftp server</strong></p>

<ul>
<li><p>Install vsftpd <code>sudo apt-get install vsftpd</code></p></li>
<li><p>Edit <code>/etc/vsftpd.conf</code></p>

<ul>
<li><code>anonymous_enable</code></li>
<li><code>write_enable</code></li>
<li><code>ftpd_banner</code></li>
</ul>
</li>
<li><p>Save the file and restart ftp service by <code>sudo /etc/init.d/vsftpd restart</code></p></li>
<li><p>Copy files you want to shared to folder <code>/srv/ftp</code></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery change element type]]></title>
    <link href="http://fedcuit.github.com/blog/2013/03/20/change-element-type-using-jquery/"/>
    <updated>2013-03-20T22:36:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2013/03/20/change-element-type-using-jquery</id>
    <content type="html"><![CDATA[<p>By default, jQuery does not allow modify the <code>type</code> of a element, if you do so, a error will occur: <code>Error: type property can't be changed</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;:text:visible&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="s1">&#39;password&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>But if when the target element is <code>detached</code> from DOM tree, then the type can be changed, so we can use jQuery to change the type in this way(we need create a new element to mark the position of the target element):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">$marker</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;span /&gt;&#39;</span><span class="p">).</span><span class="nx">insertBefore</span><span class="p">(</span><span class="s1">&#39;:text:visible&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;:text:visible&#39;</span><span class="p">).</span><span class="nx">detach</span><span class="p">().</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="s1">&#39;password&#39;</span><span class="p">).</span><span class="nx">insertAfter</span><span class="p">(</span><span class="nx">$marker</span><span class="p">).</span><span class="nx">focus</span><span class="p">();</span>
</span><span class='line'><span class="nx">$marker</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Do you think you&#8217;ve get the final answer? No ! Dom element supports modify <code>type</code> directly, so the simplest way should be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;:text:visible&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">type</span><span class="o">=</span><span class="s2">&quot;password&quot;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recoding and Playing in VIM]]></title>
    <link href="http://fedcuit.github.com/blog/2013/02/25/record-and-play-in-vim/"/>
    <updated>2013-02-25T13:56:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2013/02/25/record-and-play-in-vim</id>
    <content type="html"><![CDATA[<ul>
<li>Start recording by pressing q, followed by a lower case character to name the macro</li>
<li>Perform any typical editing, actions inside Vim editor, which will be recorded</li>
<li>Stop recording by pressing q</li>
<li>Play the recorded macro by pressing @ followed by the macro name</li>
<li>To repeat macros multiple times, press : NN @ macro name. NN is a number</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.bash_profile VS .bashrc]]></title>
    <link href="http://fedcuit.github.com/blog/2013/02/25/profile-of-bash/"/>
    <updated>2013-02-25T12:04:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2013/02/25/profile-of-bash</id>
    <content type="html"><![CDATA[<ul>
<li><code>/bin/bash</code><br/>
  The bash executable</li>
<li><code>/etc/profile</code><br/>
  The systemwide initialization file, executed for login shells</li>
<li><code>~/.bash_profile</code><br/>
  The personal initialization file, executed for login shells(type username and password first, e.g. ssh)</li>
<li><code>~/.bashrc</code><br/>
  The individual per-interactive-shell startup file(executed for non-login shells)</li>
<li><code>~/.bash_logout</code><br/>
  The individual login shell cleanup file, executed when a login shell exits</li>
<li><code>~/.inputrc</code><br/>
  Individual readline initialization file</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 命令之Sort]]></title>
    <link href="http://fedcuit.github.com/blog/2013/02/16/sort-in-linux/"/>
    <updated>2013-02-16T13:35:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2013/02/16/sort-in-linux</id>
    <content type="html"><![CDATA[<p>Sort</p>

<ul>
<li><code>-u</code> unique</li>
<li><code>-f</code> ignore case<br/>
  fold lower case to upper case characters</li>
<li><code>-b</code> &#8211;ignore-leading-blanks <br/>
  ignore leading blanks</li>
<li><code>-n</code> &#8211;numeric-sort<br/>
  compare according to string numerical value</li>
<li><code>-t</code> &#8211;field-separator=SEP<br/>
  use SEP instead of non-blank to blank transition</li>
<li><code>-k</code> &#8211;key=POS1[,POS2]<br/>
  start a key at POS1, end it at POS2 (origin 1)</li>
</ul>


<p>-t -k 经常配合使用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat fruit.txt
</span><span class='line'>banana:30:5.5
</span><span class='line'>apple:10:2.5
</span><span class='line'>pear:90:2.3
</span><span class='line'>orange:20:3.4
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sort -n -k 2 -t : fruit.txt
</span><span class='line'>apple:10:2.5
</span><span class='line'>orange:20:3.4
</span><span class='line'>banana:30:5.5
</span><span class='line'>pear:90:2.3
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>-r</code> &#8211;reverse<br/>
  reverse the result of comparisons</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[查看Jar包内容]]></title>
    <link href="http://fedcuit.github.com/blog/2013/01/31/show-content-of-jar-file/"/>
    <updated>2013-01-31T22:28:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2013/01/31/show-content-of-jar-file</id>
    <content type="html"><![CDATA[<p>已经有快一年没有写过Java代码了，这段时间看Gradle, 发现Java社区还是发展挺快的( 亦或是我已经out很久了 ^_^ ), 以前的打包工作都是Ant或是Maven来完成的，如果接触过Django或是Rails的人看到Ant跟Maven里的那一大堆配置，一定都快吐了，现在好了，基于Groovy的Gradle的代码让这一切变得不再那么麻烦，只需使用<code>gradle build</code>就可以生成jar包了.</p>

<p>不知道什么原因，我在使用生成的jar文件时总是提示类找不到，感觉应该是生成的jar文件有问题，Google了查看jar文件内容的命令, 在这里分享一下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>jar tvf filename.jar
</span></code></pre></td></tr></table></div></figure>


<table>
<thead>
<tr>
<th> Option    </th>
<th>  Description</th>
</tr>
</thead>
<tbody>
<tr>
<td> t         </td>
<td> Lists the table of contents from jarfile </td>
</tr>
<tr>
<td> v         </td>
<td> Generates verbose output to standard output </td>
</tr>
<tr>
<td> f         </td>
<td> Specifies the file jarfile  </td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS之table-layout]]></title>
    <link href="http://fedcuit.github.com/blog/2013/01/30/table-layout/"/>
    <updated>2013-01-30T13:24:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2013/01/30/table-layout</id>
    <content type="html"><![CDATA[<p>项目中有好几个页面都用到一个Table, 这个Table中有很多列，而且列数是可变化的，我们通过Javascript来动态计算出列的宽度(total_width/column_count), 但是有时候仍会出现列的宽度不一致的情况, 在W3C school了解了一下，原来有<code>table-layout</code>这个CSS属性:</p>

<p>table-layout有两个值可以设置(见下表)</p>

<table>
<thead>
<tr>
<th> value        </th>
<th> isDefault </th>
<th> algorithm                                                                                  </th>
</tr>
</thead>
<tbody>
<tr>
<td> auto         </td>
<td> YES       </td>
<td>  浏览器在已给定的表格/列/单元格的宽度的基础上，自己重新计算出一个最适合的宽度               </td>
</tr>
<tr>
<td> fixed        </td>
<td> NO        </td>
<td>  禁止浏览器的重新计算行为，按用户给定的宽度显示，可能会出现单元格内容显示不完整的情况       </td>
</tr>
</tbody>
</table>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nn">#performance_table</span> <span class="p">{</span>
</span><span class='line'>    <span class="na">...</span>
</span><span class='line'>    <span class="na">table-layout</span><span class="o">:</span> <span class="no">fixed</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>加上这个属性之后就OK了.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Border 属性在IE下的奇怪表现]]></title>
    <link href="http://fedcuit.github.com/blog/2013/01/29/border-style-in-ie/"/>
    <updated>2013-01-29T13:19:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2013/01/29/border-style-in-ie</id>
    <content type="html"><![CDATA[<p>今天在调前端的时候遇到一个问题，有一个TABLE中的TR在IE下总是多显示一条很粗的底边框出来，
查看CSS时看到边框的样式是由下面的代码来控制的，似乎是为了强制在IE下显示solid的边框而非虚线.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nt">table</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">td</span><span class="o">,</span> <span class="nt">th</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// IE&#39;s dotted lines look bad</span>
</span><span class='line'>        <span class="na">border-style</span><span class="o">:</span> <span class="no">solid</span> <span class="nv">!important</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于打算修改这段CSS让其不显示下边框,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nt">table</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">td</span><span class="o">,</span> <span class="nt">th</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// IE&#39;s dotted lines look bad</span>
</span><span class='line'>        <span class="na">border-style</span><span class="o">:</span> <span class="no">solid</span> <span class="nv">!important</span><span class="p">;</span>
</span><span class='line'>        <span class="na">border-bottom</span><span class="o">:</span> <span class="no">none</span> <span class="nv">!important</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>刷新页面后还是没有起作用，Google后发现原来在IE下面对 <code>border-bottom</code> 这种简写形式支持的不好，需要拆分成完整形式，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nt">table</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">td</span><span class="o">,</span> <span class="nt">th</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// IE&#39;s dotted lines look bad</span>
</span><span class='line'>        <span class="na">border-style</span><span class="o">:</span> <span class="no">solid</span> <span class="nv">!important</span><span class="p">;</span>
</span><span class='line'>        <span class="na">border-bottom-style</span><span class="o">:</span> <span class="no">none</span> <span class="nv">!important</span><span class="p">;</span>
</span><span class='line'>        <span class="na">border-bottom-width</span><span class="o">:</span> <span class="mi">0</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>午饭后又去W3C看了一下CSS border相关的reference, 得出 <code>border</code> 由三个属性组成:</p>

<ul>
<li><code>width</code></li>
<li><code>style</code></li>
<li><code>color</code></li>
</ul>


<p>我们可以通过<code>border</code>一次性指定<code>width</code>, <code>style</code>, <code>color</code>, 也可以通过</p>

<ul>
<li><code>border-width</code></li>
<li><code>border-style</code></li>
<li><code>border-color</code></li>
</ul>


<p>来分别指定属性.</p>

<p>See more <a href="http://www.w3school.com.cn/css/css_border.asp">HERE</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[obj.length === +obj.length in javascript]]></title>
    <link href="http://fedcuit.github.com/blog/2013/01/08/javascript-determine-object-dot-length-is-number/"/>
    <updated>2013-01-08T13:55:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2013/01/08/javascript-determine-object-dot-length-is-number</id>
    <content type="html"><![CDATA[<p>晚上看Underscore.js源码的时候，看到这样的一种写法:</p>

<figure class='code'><figcaption><span>obj.lenght === +obj.length in underscore.js</span><a href='https://github.com/documentcloud/underscore/blob/master/underscore.js#L79'>Source</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="o">+</span><span class="nx">obj</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>在SO上搜索后得知原来这种写法原来跟<code>if (typeof obj.length == 'number')</code>是等价的，之所以要写成上面的那种形式的原因是前者比后者要节省5个字节的空间。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为单个文件添加Django支持]]></title>
    <link href="http://fedcuit.github.com/blog/2012/12/24/add-django-support-in-single-file/"/>
    <updated>2012-12-24T22:30:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2012/12/24/add-django-support-in-single-file</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="c">#using your own django project settings module name(not file name)</span>
</span><span class='line'><span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;DJANGO_SETTINGS_MODULE&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;datawinners.settings&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>必须先完成`DJANGO_SETTINGS_MODULE`的配置，然后再使用Django提供的功能。
</code></pre>

<p>在配置<code>DJANGO_SETTINGS_MODULE</code>之前，需要先配置<code>PYTHONPATH</code>, Django在执行的时候会从<code>PYTHONPATH</code>中去查找<code>DJANGO_SETTINGS_MODULE</code>指定的模块。<code>PYTHONPATH</code>跟Java的<code>CLASSPATH</code>作用上是一样的.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">PYTHONPATH</span><span class="o">=</span><span class="s2">&quot;/home/twer/workspace/datawinners/datawinners&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Built-in Functions]]></title>
    <link href="http://fedcuit.github.com/blog/2012/11/20/python-built-in/"/>
    <updated>2012-11-20T21:13:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2012/11/20/python-built-in</id>
    <content type="html"><![CDATA[<ul>
<li><code>cmp(x, y)</code></li>
</ul>


<h1>Attribute</h1>

<ul>
<li><code>delattr(object, name)</code><br/>
  <code>delattr(x, 'foobar')</code> is equivalent to <code>del x.foobar</code>.</li>
<li><code>getattr(object, name[, default])</code></li>
<li><code>setattr(object, name, value)</code></li>
<li><code>hasattr(object, name)</code></li>
<li><code>repr(object)</code><br/>
This is the same value yielded by conversions (reverse quotes).</li>
</ul>


<h1>Type</h1>

<ul>
<li><code>basestring</code><br/>
<code>isinstance(obj, *basestring*)</code> is equivalent to isinstance(obj, (str, unicode)).</li>
<li><code>isinstance(object, classinfo)</code></li>
<li><code>issubclass(class, classinfo)</code></li>
<li><code>super(type[, object-or-type])</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">C</span><span class="p">(</span><span class="n">B</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">method</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">arg</span><span class="p">):</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">(</span><span class="n">C</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>type(object)</code> <code>type(name, bases, dict)</code><br/>
With one argument, return the type of an object.<br/>
With three arguments, return a new type object.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># the following two statements create identical type objects</span>
</span><span class='line'><span class="k">class</span> <span class="nc">X</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">X</span> <span class="o">=</span> <span class="nb">type</span><span class="p">(</span><span class="s">&#39;X&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nb">object</span><span class="p">,),</span> <span class="nb">dict</span><span class="p">(</span><span class="n">a</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Type Cast</h1>

<ul>
<li><code>unichr(i)</code></li>
<li><code>chr(i)</code><br/>
Return a string of one character whose ASCII code is the integer</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">print</span> <span class="nb">chr</span><span class="p">(</span><span class="mi">97</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;</span><span class="s">&#39;a&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>ord(c)</code></li>
<li><code>int(x)</code></li>
<li><code>hex(x)</code></li>
<li><code>float(x)</code></li>
<li><code>long(x)</code></li>
<li><code>oct(x)</code></li>
</ul>


<h2>Collection</h2>

<ul>
<li><code>frozenset</code></li>
<li><code>tuple([iterable])</code><br/>
Return a tuple whose items are the same and in the same order as iterable‘s items.<br/>
<code>tuple</code> is an immutable sequence type.</li>
<li><code>range(stop)</code>
<code>range(start, stop[, step])</code><br/>
If the start argument is omitted, it defaults to 0.</li>
<li><code>enumerate(sequence, start=0)</code><br/>
Return an enumerate object.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">seasons</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;Spring&#39;</span><span class="p">,</span> <span class="s">&#39;Summer&#39;</span><span class="p">,</span> <span class="s">&#39;Fall&#39;</span><span class="p">,</span> <span class="s">&#39;Winter&#39;</span><span class="p">]</span>
</span><span class='line'><span class="nb">list</span><span class="p">(</span><span class="nb">enumerate</span><span class="p">(</span><span class="n">seasons</span><span class="p">))</span>
</span><span class='line'><span class="o">&gt;&gt;</span><span class="p">[(</span><span class="mi">0</span><span class="p">,</span> <span class="s">&#39;Spring&#39;</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;Summer&#39;</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s">&#39;Fall&#39;</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&#39;Winter&#39;</span><span class="p">)]</span>
</span><span class='line'><span class="nb">list</span><span class="p">(</span><span class="nb">enumerate</span><span class="p">(</span><span class="n">seasons</span><span class="p">,</span> <span class="n">start</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="o">&gt;&gt;</span><span class="p">[(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;Spring&#39;</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s">&#39;Summer&#39;</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&#39;Fall&#39;</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="s">&#39;Winter&#39;</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>reversed(seq)</code><br/>
Return a reverse <code>iterator</code>.</li>
<li><code>sorted(iterable[, cmp[, key[, reverse]]])</code><br/>
In general, the key and reverse conversion processes are much faster than specifying an equivalent cmp function.</li>
<li><code>next(iterator[, default])</code><br/>
Retrieve the next item from the iterator by calling its next() method.</li>
<li><code>iter(o[, sentinel])</code><br/>
Return an iterator object. If the second argument, sentinel, is given, then o must be a callable object. The iterator created in this case will call o with no arguments for each call to its next() method; if the value returned is equal to sentinel, StopIteration will be raised, otherwise the value will be returned.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;mydata.txt&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">iter</span><span class="p">(</span><span class="n">fp</span><span class="o">.</span><span class="n">readline</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">):</span>
</span><span class='line'>        <span class="n">process_line</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>filter(function, iterable)</code></li>
<li><code>map(function, iterable, ...)</code><br/>
Apply function to every item of iterable and return a list of the results.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">list1</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;edfeng&#39;</span><span class="p">,</span> <span class="s">&#39;tyzhang&#39;</span><span class="p">,</span> <span class="s">&#39;zming&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">list2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">80</span><span class="p">]</span>
</span><span class='line'><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">name</span><span class="p">,</span> <span class="n">score</span> <span class="p">:</span> <span class="n">name</span> <span class="o">+</span> <span class="s">&#39;-&#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">score</span><span class="p">),</span> <span class="n">list1</span><span class="p">,</span> <span class="n">list2</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;</span><span class="p">[</span><span class="s">&#39;edfeng-100&#39;</span><span class="p">,</span> <span class="s">&#39;tyzhang-50&#39;</span><span class="p">,</span> <span class="s">&#39;zming-80&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>reduce(function, iterable[, initializer])</code><br/>
<code>reduce</code> just like reduce function in couchdb, it takes a list and returns a single value.<br/>
<code>reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])</code> calculates <code>((((1+2)+3)+4)+5)</code>.</li>
<li><code>min()/max()</code>
<code>min(iterable[, key=func])</code><br/>
<code>min(arg1, arg2, *args[, key=func])</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="p">[(</span><span class="s">&#39;tester150411@gmail.com&#39;</span><span class="p">,</span> <span class="s">&#39;62&#39;</span><span class="p">,</span> <span class="s">&#39;624&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;tester150411@gmail.com&#39;</span><span class="p">,</span> <span class="s">&#39;62&#39;</span><span class="p">,</span> <span class="s">&#39;528&#39;</span><span class="p">)]</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;Max time:&quot;</span><span class="p">,</span>
</span><span class='line'><span class="k">print</span> <span class="nb">max</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="nb">int</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;Min time:&quot;</span><span class="p">,</span>
</span><span class='line'><span class="k">print</span> <span class="nb">min</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="nb">int</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>next(iterator[, default])</code></li>
</ul>


<h1>Decorators</h1>

<ul>
<li><code>classmethod(function)</code><br/>
A class method receives the class as implicit first argument, just like an instance method receives the instance. To declare a class method, use this idiom:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">C</span><span class="p">:</span>
</span><span class='line'>    <span class="nd">@classmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">,</span> <span class="o">...</span><span class="p">):</span> <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>staticmethod(function)</code><br/>
A static method does not receive an implicit first argument. To declare a static method, use this idiom:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">C</span><span class="p">:</span>
</span><span class='line'>    <span class="nd">@staticmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">,</span> <span class="o">...</span><span class="p">):</span> <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>property</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">C</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_x</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># c.x will invoke this method</span>
</span><span class='line'>    <span class="nd">@property</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">x</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="s">&quot;&quot;</span><span class="n">I</span><span class="s">&#39;m the &#39;</span><span class="n">x</span><span class="s">&#39; property.&quot;&quot;</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_x</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># c.x = value will invoke this method</span>
</span><span class='line'>    <span class="nd">@x.setter</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">x</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_x</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># del c.x will invoke this method</span>
</span><span class='line'>    <span class="nd">@x.deleter</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">x</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">del</span> <span class="bp">self</span><span class="o">.</span><span class="n">_x</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Math</h1>

<ul>
<li><code>pow(x, y[, z])</code></li>
<li><code>sum(iterable[, start])</code></li>
</ul>


<h1>IO</h1>

<ul>
<li><code>print(*objects, sep=' ', end='\n', file=sys.stdout)</code></li>
<li><code>raw_input([prompt])</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="nb">raw_input</span><span class="p">(</span><span class="s">&#39;--&gt; &#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;--&gt;</span> <span class="n">Monty</span> <span class="n">Python</span><span class="s">&#39;s Flying Circus</span>
</span><span class='line'><span class="n">s</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="s">&quot;Monty Python&#39;s Flying Circus&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 杂记]]></title>
    <link href="http://fedcuit.github.com/blog/2012/11/18/python-misc/"/>
    <updated>2012-11-18T15:13:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2012/11/18/python-misc</id>
    <content type="html"><![CDATA[<ul>
<li>Print void new line<br/>
You can use a trailing comma to avoid a newline being printed.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">print</span> <span class="s">&quot;The total count is&quot;</span><span class="p">,</span>
</span><span class='line'><span class="k">print</span> <span class="n">total_count</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Firefox old version download link]]></title>
    <link href="http://fedcuit.github.com/blog/2012/11/14/firefox-old-version-download-link/"/>
    <updated>2012-11-14T13:17:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2012/11/14/firefox-old-version-download-link</id>
    <content type="html"><![CDATA[<p><a href="https://ftp.mozilla.org/pub/mozilla.org/firefox/releases/">https://ftp.mozilla.org/pub/mozilla.org/firefox/releases/</a></p>
]]></content>
  </entry>
  
</feed>

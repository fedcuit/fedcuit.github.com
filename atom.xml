<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Feng erdong's Blog]]></title>
  <link href="http://fedcuit.github.com/atom.xml" rel="self"/>
  <link href="http://fedcuit.github.com/"/>
  <updated>2013-02-16T17:32:47+08:00</updated>
  <id>http://fedcuit.github.com/</id>
  <author>
    <name><![CDATA[Feng erdong]]></name>
    <email><![CDATA[fedcuit@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux 命令之Sort]]></title>
    <link href="http://fedcuit.github.com/blog/2013/02/16/sort-in-linux/"/>
    <updated>2013-02-16T13:35:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2013/02/16/sort-in-linux</id>
    <content type="html"><![CDATA[<p>Sort</p>

<ul>
<li><code>-u</code> unique</li>
<li><code>-f</code> ignore case<br/>
  fold lower case to upper case characters</li>
<li><code>-b</code> &#8211;ignore-leading-blanks <br/>
  ignore leading blanks</li>
<li><code>-n</code> &#8211;numeric-sort<br/>
  compare according to string numerical value</li>
<li><code>-t</code> &#8211;field-separator=SEP<br/>
  use SEP instead of non-blank to blank transition</li>
<li><code>-k</code> &#8211;key=POS1[,POS2]<br/>
  start a key at POS1, end it at POS2 (origin 1)</li>
</ul>


<p>-t -k 经常配合使用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat fruit.txt
</span><span class='line'>banana:30:5.5
</span><span class='line'>apple:10:2.5
</span><span class='line'>pear:90:2.3
</span><span class='line'>orange:20:3.4
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sort -n -k 2 -t : fruit.txt
</span><span class='line'>apple:10:2.5
</span><span class='line'>orange:20:3.4
</span><span class='line'>banana:30:5.5
</span><span class='line'>pear:90:2.3
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>-r</code> &#8211;reverse<br/>
  reverse the result of comparisons</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[查看Jar包内容]]></title>
    <link href="http://fedcuit.github.com/blog/2013/01/31/show-content-of-jar-file/"/>
    <updated>2013-01-31T22:28:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2013/01/31/show-content-of-jar-file</id>
    <content type="html"><![CDATA[<p>已经有快一年没有写过Java代码了，这段时间看Gradle, 发现Java社区还是发展挺快的( 亦或是我已经out很久了 ^_^ ), 以前的打包工作都是Ant或是Maven来完成的，如果接触过Django或是Rails的人看到Ant跟Maven里的那一大堆配置，一定都快吐了，现在好了，基于Groovy的Gradle的代码让这一切变得不再那么麻烦，只需使用<code>gradle build</code>就可以生成jar包了.</p>

<p>不知道什么原因，我在使用生成的jar文件时总是提示类找不到，感觉应该是生成的jar文件有问题，Google了查看jar文件内容的命令, 在这里分享一下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>jar tvf filename.jar
</span></code></pre></td></tr></table></div></figure>


<table>
<thead>
<tr>
<th> Option    </th>
<th>  Description</th>
</tr>
</thead>
<tbody>
<tr>
<td> t         </td>
<td> Lists the table of contents from jarfile </td>
</tr>
<tr>
<td> v         </td>
<td> Generates verbose output to standard output </td>
</tr>
<tr>
<td> f         </td>
<td> Specifies the file jarfile  </td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS之table-layout]]></title>
    <link href="http://fedcuit.github.com/blog/2013/01/30/table-layout/"/>
    <updated>2013-01-30T13:24:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2013/01/30/table-layout</id>
    <content type="html"><![CDATA[<p>项目中有好几个页面都用到一个Table, 这个Table中有很多列，而且列数是可变化的，我们通过Javascript来动态计算出列的宽度(total_width/column_count), 但是有时候仍会出现列的宽度不一致的情况, 在W3C school了解了一下，原来有<code>table-layout</code>这个CSS属性:</p>

<p>table-layout有两个值可以设置(见下表)</p>

<table>
<thead>
<tr>
<th> value        </th>
<th> isDefault </th>
<th> algorithm                                                                                  </th>
</tr>
</thead>
<tbody>
<tr>
<td> auto         </td>
<td> YES       </td>
<td>  浏览器在已给定的表格/列/单元格的宽度的基础上，自己重新计算出一个最适合的宽度               </td>
</tr>
<tr>
<td> fixed        </td>
<td> NO        </td>
<td>  禁止浏览器的重新计算行为，按用户给定的宽度显示，可能会出现单元格内容显示不完整的情况       </td>
</tr>
</tbody>
</table>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nn">#performance_table</span> <span class="p">{</span>
</span><span class='line'>    <span class="na">...</span>
</span><span class='line'>    <span class="na">table-layout</span><span class="o">:</span> <span class="no">fixed</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>加上这个属性之后就OK了.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Border 属性在IE下的奇怪表现]]></title>
    <link href="http://fedcuit.github.com/blog/2013/01/29/border-style-in-ie/"/>
    <updated>2013-01-29T13:19:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2013/01/29/border-style-in-ie</id>
    <content type="html"><![CDATA[<p>今天在调前端的时候遇到一个问题，有一个TABLE中的TR在IE下总是多显示一条很粗的底边框出来，
查看CSS时看到边框的样式是由下面的代码来控制的，似乎是为了强制在IE下显示solid的边框而非虚线.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nt">table</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">td</span><span class="o">,</span> <span class="nt">th</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// IE&#39;s dotted lines look bad</span>
</span><span class='line'>        <span class="na">border-style</span><span class="o">:</span> <span class="no">solid</span> <span class="nv">!important</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于打算修改这段CSS让其不显示下边框,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nt">table</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">td</span><span class="o">,</span> <span class="nt">th</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// IE&#39;s dotted lines look bad</span>
</span><span class='line'>        <span class="na">border-style</span><span class="o">:</span> <span class="no">solid</span> <span class="nv">!important</span><span class="p">;</span>
</span><span class='line'>        <span class="na">border-bottom</span><span class="o">:</span> <span class="no">none</span> <span class="nv">!important</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>刷新页面后还是没有起作用，Google后发现原来在IE下面对 <code>border-bottom</code> 这种简写形式支持的不好，需要拆分成完整形式，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nt">table</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">td</span><span class="o">,</span> <span class="nt">th</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// IE&#39;s dotted lines look bad</span>
</span><span class='line'>        <span class="na">border-style</span><span class="o">:</span> <span class="no">solid</span> <span class="nv">!important</span><span class="p">;</span>
</span><span class='line'>        <span class="na">border-bottom-style</span><span class="o">:</span> <span class="no">none</span> <span class="nv">!important</span><span class="p">;</span>
</span><span class='line'>        <span class="na">border-bottom-width</span><span class="o">:</span> <span class="mi">0</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>午饭后又去W3C看了一下CSS border相关的reference, 得出 <code>border</code> 由三个属性组成:</p>

<ul>
<li><code>width</code></li>
<li><code>style</code></li>
<li><code>color</code></li>
</ul>


<p>我们可以通过<code>border</code>一次性指定<code>width</code>, <code>style</code>, <code>color</code>, 也可以通过</p>

<ul>
<li><code>border-width</code></li>
<li><code>border-style</code></li>
<li><code>border-color</code></li>
</ul>


<p>来分别指定属性.</p>

<p>See more <a href="http://www.w3school.com.cn/css/css_border.asp">HERE</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[obj.length === +obj.length in javascript]]></title>
    <link href="http://fedcuit.github.com/blog/2013/01/08/javascript-determine-object-dot-length-is-number/"/>
    <updated>2013-01-08T13:55:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2013/01/08/javascript-determine-object-dot-length-is-number</id>
    <content type="html"><![CDATA[<p>晚上看Underscore.js源码的时候，看到这样的一种写法:</p>

<figure class='code'><figcaption><span>obj.lenght === +obj.length in underscore.js</span><a href='https://github.com/documentcloud/underscore/blob/master/underscore.js#L79'>Source</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="o">+</span><span class="nx">obj</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>在SO上搜索后得知原来这种写法原来跟<code>if (typeof obj.length == 'number')</code>是等价的，之所以要写成上面的那种形式的原因是前者比后者要节省5个字节的空间。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为单个文件添加Django支持]]></title>
    <link href="http://fedcuit.github.com/blog/2012/12/24/add-django-support-in-single-file/"/>
    <updated>2012-12-24T22:30:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2012/12/24/add-django-support-in-single-file</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="c">#using your own django project settings module name(not file name)</span>
</span><span class='line'><span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&#39;DJANGO_SETTINGS_MODULE&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;datawinners.settings&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>必须先完成`DJANGO_SETTINGS_MODULE`的配置，然后再使用Django提供的功能。
</code></pre>

<p>在配置<code>DJANGO_SETTINGS_MODULE</code>之前，需要先配置<code>PYTHONPATH</code>, Django在执行的时候会从<code>PYTHONPATH</code>中去查找<code>DJANGO_SETTINGS_MODULE</code>指定的模块。<code>PYTHONPATH</code>跟Java的<code>CLASSPATH</code>作用上是一样的.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">PYTHONPATH</span><span class="o">=</span><span class="s2">&quot;/home/twer/workspace/datawinners/datawinners&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Built-in Functions]]></title>
    <link href="http://fedcuit.github.com/blog/2012/11/20/python-built-in/"/>
    <updated>2012-11-20T21:13:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2012/11/20/python-built-in</id>
    <content type="html"><![CDATA[<ul>
<li><code>cmp(x, y)</code></li>
</ul>


<h1>Attribute</h1>

<ul>
<li><code>delattr(object, name)</code><br/>
  <code>delattr(x, 'foobar')</code> is equivalent to <code>del x.foobar</code>.</li>
<li><code>getattr(object, name[, default])</code></li>
<li><code>setattr(object, name, value)</code></li>
<li><code>hasattr(object, name)</code></li>
<li><code>repr(object)</code><br/>
This is the same value yielded by conversions (reverse quotes).</li>
</ul>


<h1>Type</h1>

<ul>
<li><code>basestring</code><br/>
<code>isinstance(obj, *basestring*)</code> is equivalent to isinstance(obj, (str, unicode)).</li>
<li><code>isinstance(object, classinfo)</code></li>
<li><code>issubclass(class, classinfo)</code></li>
<li><code>super(type[, object-or-type])</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">C</span><span class="p">(</span><span class="n">B</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">method</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">arg</span><span class="p">):</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">(</span><span class="n">C</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>type(object)</code> <code>type(name, bases, dict)</code><br/>
With one argument, return the type of an object.<br/>
With three arguments, return a new type object.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># the following two statements create identical type objects</span>
</span><span class='line'><span class="k">class</span> <span class="nc">X</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">X</span> <span class="o">=</span> <span class="nb">type</span><span class="p">(</span><span class="s">&#39;X&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nb">object</span><span class="p">,),</span> <span class="nb">dict</span><span class="p">(</span><span class="n">a</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Type Cast</h1>

<ul>
<li><code>unichr(i)</code></li>
<li><code>chr(i)</code><br/>
Return a string of one character whose ASCII code is the integer</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">print</span> <span class="nb">chr</span><span class="p">(</span><span class="mi">97</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;</span><span class="s">&#39;a&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>ord(c)</code></li>
<li><code>int(x)</code></li>
<li><code>hex(x)</code></li>
<li><code>float(x)</code></li>
<li><code>long(x)</code></li>
<li><code>oct(x)</code></li>
</ul>


<h2>Collection</h2>

<ul>
<li><code>frozenset</code></li>
<li><code>tuple([iterable])</code><br/>
Return a tuple whose items are the same and in the same order as iterable‘s items.<br/>
<code>tuple</code> is an immutable sequence type.</li>
<li><code>range(stop)</code>
<code>range(start, stop[, step])</code><br/>
If the start argument is omitted, it defaults to 0.</li>
<li><code>enumerate(sequence, start=0)</code><br/>
Return an enumerate object.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">seasons</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;Spring&#39;</span><span class="p">,</span> <span class="s">&#39;Summer&#39;</span><span class="p">,</span> <span class="s">&#39;Fall&#39;</span><span class="p">,</span> <span class="s">&#39;Winter&#39;</span><span class="p">]</span>
</span><span class='line'><span class="nb">list</span><span class="p">(</span><span class="nb">enumerate</span><span class="p">(</span><span class="n">seasons</span><span class="p">))</span>
</span><span class='line'><span class="o">&gt;&gt;</span><span class="p">[(</span><span class="mi">0</span><span class="p">,</span> <span class="s">&#39;Spring&#39;</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;Summer&#39;</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s">&#39;Fall&#39;</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&#39;Winter&#39;</span><span class="p">)]</span>
</span><span class='line'><span class="nb">list</span><span class="p">(</span><span class="nb">enumerate</span><span class="p">(</span><span class="n">seasons</span><span class="p">,</span> <span class="n">start</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="o">&gt;&gt;</span><span class="p">[(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;Spring&#39;</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s">&#39;Summer&#39;</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&#39;Fall&#39;</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="s">&#39;Winter&#39;</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>reversed(seq)</code><br/>
Return a reverse <code>iterator</code>.</li>
<li><code>sorted(iterable[, cmp[, key[, reverse]]])</code><br/>
In general, the key and reverse conversion processes are much faster than specifying an equivalent cmp function.</li>
<li><code>next(iterator[, default])</code><br/>
Retrieve the next item from the iterator by calling its next() method.</li>
<li><code>iter(o[, sentinel])</code><br/>
Return an iterator object. If the second argument, sentinel, is given, then o must be a callable object. The iterator created in this case will call o with no arguments for each call to its next() method; if the value returned is equal to sentinel, StopIteration will be raised, otherwise the value will be returned.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;mydata.txt&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">iter</span><span class="p">(</span><span class="n">fp</span><span class="o">.</span><span class="n">readline</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">):</span>
</span><span class='line'>        <span class="n">process_line</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>filter(function, iterable)</code></li>
<li><code>map(function, iterable, ...)</code><br/>
Apply function to every item of iterable and return a list of the results.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">list1</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;edfeng&#39;</span><span class="p">,</span> <span class="s">&#39;tyzhang&#39;</span><span class="p">,</span> <span class="s">&#39;zming&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">list2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">80</span><span class="p">]</span>
</span><span class='line'><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">name</span><span class="p">,</span> <span class="n">score</span> <span class="p">:</span> <span class="n">name</span> <span class="o">+</span> <span class="s">&#39;-&#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">score</span><span class="p">),</span> <span class="n">list1</span><span class="p">,</span> <span class="n">list2</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;</span><span class="p">[</span><span class="s">&#39;edfeng-100&#39;</span><span class="p">,</span> <span class="s">&#39;tyzhang-50&#39;</span><span class="p">,</span> <span class="s">&#39;zming-80&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>reduce(function, iterable[, initializer])</code><br/>
<code>reduce</code> just like reduce function in couchdb, it takes a list and returns a single value.<br/>
<code>reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])</code> calculates <code>((((1+2)+3)+4)+5)</code>.</li>
<li><code>min()/max()</code>
<code>min(iterable[, key=func])</code><br/>
<code>min(arg1, arg2, *args[, key=func])</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="p">[(</span><span class="s">&#39;tester150411@gmail.com&#39;</span><span class="p">,</span> <span class="s">&#39;62&#39;</span><span class="p">,</span> <span class="s">&#39;624&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;tester150411@gmail.com&#39;</span><span class="p">,</span> <span class="s">&#39;62&#39;</span><span class="p">,</span> <span class="s">&#39;528&#39;</span><span class="p">)]</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;Max time:&quot;</span><span class="p">,</span>
</span><span class='line'><span class="k">print</span> <span class="nb">max</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="nb">int</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;Min time:&quot;</span><span class="p">,</span>
</span><span class='line'><span class="k">print</span> <span class="nb">min</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="nb">int</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>next(iterator[, default])</code></li>
</ul>


<h1>Decorators</h1>

<ul>
<li><code>classmethod(function)</code><br/>
A class method receives the class as implicit first argument, just like an instance method receives the instance. To declare a class method, use this idiom:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">C</span><span class="p">:</span>
</span><span class='line'>    <span class="nd">@classmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">,</span> <span class="o">...</span><span class="p">):</span> <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>staticmethod(function)</code><br/>
A static method does not receive an implicit first argument. To declare a static method, use this idiom:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">C</span><span class="p">:</span>
</span><span class='line'>    <span class="nd">@staticmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">,</span> <span class="o">...</span><span class="p">):</span> <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>property</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">C</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_x</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># c.x will invoke this method</span>
</span><span class='line'>    <span class="nd">@property</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">x</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="s">&quot;&quot;</span><span class="n">I</span><span class="s">&#39;m the &#39;</span><span class="n">x</span><span class="s">&#39; property.&quot;&quot;</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_x</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># c.x = value will invoke this method</span>
</span><span class='line'>    <span class="nd">@x.setter</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">x</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_x</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># del c.x will invoke this method</span>
</span><span class='line'>    <span class="nd">@x.deleter</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">x</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">del</span> <span class="bp">self</span><span class="o">.</span><span class="n">_x</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Math</h1>

<ul>
<li><code>pow(x, y[, z])</code></li>
<li><code>sum(iterable[, start])</code></li>
</ul>


<h1>IO</h1>

<ul>
<li><code>print(*objects, sep=' ', end='\n', file=sys.stdout)</code></li>
<li><code>raw_input([prompt])</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="nb">raw_input</span><span class="p">(</span><span class="s">&#39;--&gt; &#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;--&gt;</span> <span class="n">Monty</span> <span class="n">Python</span><span class="s">&#39;s Flying Circus</span>
</span><span class='line'><span class="n">s</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="s">&quot;Monty Python&#39;s Flying Circus&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 杂记]]></title>
    <link href="http://fedcuit.github.com/blog/2012/11/18/python-misc/"/>
    <updated>2012-11-18T15:13:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2012/11/18/python-misc</id>
    <content type="html"><![CDATA[<ul>
<li>Print void new line<br/>
You can use a trailing comma to avoid a newline being printed.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">print</span> <span class="s">&quot;The total count is&quot;</span><span class="p">,</span>
</span><span class='line'><span class="k">print</span> <span class="n">total_count</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Firefox old version download link]]></title>
    <link href="http://fedcuit.github.com/blog/2012/11/14/firefox-old-version-download-link/"/>
    <updated>2012-11-14T13:17:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2012/11/14/firefox-old-version-download-link</id>
    <content type="html"><![CDATA[<p><a href="https://ftp.mozilla.org/pub/mozilla.org/firefox/releases/">https://ftp.mozilla.org/pub/mozilla.org/firefox/releases/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下SSH常用配置]]></title>
    <link href="http://fedcuit.github.com/blog/2012/11/07/ssh-config/"/>
    <updated>2012-11-07T22:32:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2012/11/07/ssh-config</id>
    <content type="html"><![CDATA[<h2>Make alias</h2>

<p>Edit ~/.ssh/config and add the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Host db
</span><span class='line'>    Hostname 127.0.0.1
</span><span class='line'>    User sa
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes of Definitive guide to couchdb - CHAPTER 21 View Cookbook for SQL Jockeys]]></title>
    <link href="http://fedcuit.github.com/blog/2012/10/27/definitive-guide-to-couchd-chapter21/"/>
    <updated>2012-10-27T21:41:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2012/10/27/definitive-guide-to-couchd-chapter21</id>
    <content type="html"><![CDATA[<h2>Defining a View</h2>

<p>Defining a view is done by creating a special document in a CouchDB database. The only real specialness is the <code>_id</code> of the document, which starts with <code>_design/</code> —for example, <code>_design/application</code>. Other than that, it is just a regular CouchDB document.</p>

<h2>Querying a View</h2>

<p>/database/<em>design/application/</em>view/viewname</p>

<h2>Map Function</h2>

<p>A map function may call the built-in <code>emit(key, value)</code> function 0 to N  times per document, creating a row in the map result per invocation.</p>

<p>(a map function can return any counts of emit(key, value) call)</p>

<h2>Look up by key</h2>

<p>To look something up quickly, regardless of the storage mechanism, an index is needed.  An index is a data structure optimized for quick search and retrieval. CouchDB’s map result is stored in such an index, which happens to be a B+ tree.</p>

<p>(couchdb will generate a file with name xxxx.view to store the result of map/reduce function, it will copy the desired data from documents to the view file, not just reference it, so a view file may be very large)</p>

<p>Query: <code>/ladies/_design/ladies/_view/age?key=5</code></p>

<p>Result:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;total_rows&quot;</span><span class="o">:</span><span class="mi">3</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;offset&quot;</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;rows&quot;</span><span class="o">:</span><span class="p">[</span>
</span><span class='line'>        <span class="p">{</span><span class="s2">&quot;id&quot;</span><span class="o">:</span><span class="s2">&quot;fc2636bf50556346f1ce46b4bc01fe30&quot;</span><span class="p">,</span><span class="s2">&quot;key&quot;</span><span class="o">:</span><span class="mi">5</span><span class="p">,</span><span class="s2">&quot;value&quot;</span><span class="o">:</span><span class="s2">&quot;Lena&quot;</span><span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>total_rows</code>: how many documents are there in this view result<br/>
<code>offset</code>: position/index of this document/the first document in this view result</p>

<h2>Aggregation Function</h2>

<ul>
<li>Reduce functions are similar to aggregate functions in SQL. They compute a value over multiple documents.</li>
<li>Reduce functions operate on the output of the map function (also called the map result  or intermediate result ).</li>
<li>This reduce function takes two arguments: a list of keys  and a list of values .</li>
<li>You’ll see one difference between the map and the reduce function. The map function uses emit() to create its result, whereas the reduce function returns a value.</li>
</ul>


<p>The result for a reduce view may looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;rows&quot;</span><span class="o">:</span><span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="s2">&quot;key&quot;</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="s2">&quot;value&quot;</span><span class="o">:</span><span class="mi">15</span><span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Get Unique Values</h2>

<p>The map result will look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span><span class="s2">&quot;total_rows&quot;</span><span class="o">:</span><span class="mi">9</span><span class="p">,</span><span class="s2">&quot;offset&quot;</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="s2">&quot;rows&quot;</span><span class="o">:</span><span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="s2">&quot;id&quot;</span><span class="o">:</span><span class="s2">&quot;3525ab874bc4965fa3cda7c549e92d30&quot;</span><span class="p">,</span><span class="s2">&quot;key&quot;</span><span class="o">:</span><span class="s2">&quot;bike&quot;</span><span class="p">,</span><span class="s2">&quot;value&quot;</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="s2">&quot;id&quot;</span><span class="o">:</span><span class="s2">&quot;3525ab874bc4965fa3cda7c549e92d30&quot;</span><span class="p">,</span><span class="s2">&quot;key&quot;</span><span class="o">:</span><span class="s2">&quot;couchdb&quot;</span><span class="p">,</span><span class="s2">&quot;value&quot;</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="s2">&quot;id&quot;</span><span class="o">:</span><span class="s2">&quot;53f82b1f0ff49a08ac79a9dff41d7860&quot;</span><span class="p">,</span><span class="s2">&quot;key&quot;</span><span class="o">:</span><span class="s2">&quot;couchdb&quot;</span><span class="p">,</span><span class="s2">&quot;value&quot;</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="s2">&quot;id&quot;</span><span class="o">:</span><span class="s2">&quot;da5ea89448a4506925823f4d985aabbd&quot;</span><span class="p">,</span><span class="s2">&quot;key&quot;</span><span class="o">:</span><span class="s2">&quot;couchdb&quot;</span><span class="p">,</span><span class="s2">&quot;value&quot;</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="s2">&quot;id&quot;</span><span class="o">:</span><span class="s2">&quot;3525ab874bc4965fa3cda7c549e92d30&quot;</span><span class="p">,</span><span class="s2">&quot;key&quot;</span><span class="o">:</span><span class="s2">&quot;drums&quot;</span><span class="p">,</span><span class="s2">&quot;value&quot;</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="s2">&quot;id&quot;</span><span class="o">:</span><span class="s2">&quot;53f82b1f0ff49a08ac79a9dff41d7860&quot;</span><span class="p">,</span><span class="s2">&quot;key&quot;</span><span class="o">:</span><span class="s2">&quot;hypertext&quot;</span><span class="p">,</span><span class="s2">&quot;value&quot;</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="s2">&quot;id&quot;</span><span class="o">:</span><span class="s2">&quot;da5ea89448a4506925823f4d985aabbd&quot;</span><span class="p">,</span><span class="s2">&quot;key&quot;</span><span class="o">:</span><span class="s2">&quot;music&quot;</span><span class="p">,</span><span class="s2">&quot;value&quot;</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="s2">&quot;id&quot;</span><span class="o">:</span><span class="s2">&quot;da5ea89448a4506925823f4d985aabbd&quot;</span><span class="p">,</span><span class="s2">&quot;key&quot;</span><span class="o">:</span><span class="s2">&quot;mustache&quot;</span><span class="p">,</span><span class="s2">&quot;value&quot;</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span>
</span><span class='line'>        <span class="p">{</span><span class="s2">&quot;id&quot;</span><span class="o">:</span><span class="s2">&quot;53f82b1f0ff49a08ac79a9dff41d7860&quot;</span><span class="p">,</span><span class="s2">&quot;key&quot;</span><span class="o">:</span><span class="s2">&quot;philosophy&quot;</span><span class="p">,</span><span class="s2">&quot;value&quot;</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Couchdb doesn’t have a keyword like <code>distinct</code>, but we can use <code>group</code> query parameter to group the result of reduce function, as we mentioned in last section, a reduce function only returns one value, but when we add <code>group=true</code> query parameter, multi values will be returned(each value is the reduce result of according group), grouped by the key in keys list, in this way, we can get the distinct keys(in this case, distinct tags)</li>
<li>Coucdb reduce result by default discard keys, so in the reduce result, key always be null, but if we add group=true in query, key will be used to grouping, so key will be reserved.</li>
<li><code>group=true</code> parameter can only be used on a view which has reduce function.</li>
<li>if a view has a reduce function, by default a query will return the result of reduce. we can explicit pass <code>reduce=false</code> to get map result instead of reduce result.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript集合操作]]></title>
    <link href="http://fedcuit.github.com/blog/2012/10/27/javascript-collection-operation/"/>
    <updated>2012-10-27T18:12:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2012/10/27/javascript-collection-operation</id>
    <content type="html"><![CDATA[<p>记录一些不常见的javascript集合操作.</p>

<h4>数组操作</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>常见的遍历数组的办法如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">index</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">index</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">index</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&gt;&gt;</span><span class="nx">a</span>
</span><span class='line'><span class="o">&gt;&gt;</span><span class="nx">b</span>
</span><span class='line'><span class="o">&gt;&gt;</span><span class="nx">c</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们知道在javascript中，对象跟数组都是构建在类似hashtable的数据结构上的, 即它们都是基于键值对的，所以在这一点上，我们可以把数组看成跟对象是一样的，对于一个javascript object, 我们使用 <code>for (var prop in object)</code>这种语法来遍历一个对象中的内容，这种方式对数组一样适用:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">idx</span> <span class="k">in</span> <span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">idx</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&gt;&gt;</span><span class="nx">a</span>
</span><span class='line'><span class="o">&gt;&gt;</span><span class="nx">b</span>
</span><span class='line'><span class="o">&gt;&gt;</span><span class="nx">c</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实用git命令]]></title>
    <link href="http://fedcuit.github.com/blog/2012/10/14/useful-git-commands/"/>
    <updated>2012-10-14T18:02:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2012/10/14/useful-git-commands</id>
    <content type="html"><![CDATA[<!---
Remote 
-->


<ul>
<li><p><code>git remote add &lt;remote-name&gt; &lt;remote-repo-url&gt;</code><br/>
Add another remote for current git branch and name it with given name <code>remote-name</code></p></li>
<li><p><code>git remote rename &lt;original-name&gt; &lt;new-name&gt;</code><br/>
Rename remote <code>original-name</code> to <code>new-name</code></p></li>
<li><p><code>git config branch.&lt;branch-name&gt;.remote &lt;remote-name&gt;</code><br/>
Set the default remote of branch <code>branch-name</code> to <code>remote-name</code>, this command will generate below segment in <code>.git/config</code>:</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>branch <span class="s2">&quot;&lt;branch-name&gt;&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="nv">remote</span> <span class="o">=</span> &lt;default-remote-name&gt;
</span><span class='line'>    <span class="nv">merge</span> <span class="o">=</span> refs/heads/master
</span></code></pre></td></tr></table></div></figure>


<p>File <code>.git/config</code> is used to store branches and remotes information for a git repository.</p>

<ul>
<li><code>git push &lt;remote-name&gt; [branch-name]</code><br/>
Push branch <code>branch-name</code> (If not specified, default is current branch) to remote <code>remote-name</code>.</li>
</ul>


<hr />

<!---
Branch
-->


<ul>
<li><code>git branch -D &lt;branch-name&gt;</code><br/>
Remove branch <branch-name></li>
<li><p><code>git branch -m &lt;orginal-name&gt; &lt;new-name&gt;</code><br/>
Rename branch <code>original-name</code> to given name <code>new-name</code>.</p></li>
<li><p><code>git checkout -b test origin/test</code><br/>
Git checkout remote branch</p></li>
</ul>


<hr />

<!---
Misc
-->


<ul>
<li><p><code>git reflog</code><br/>
  Reflog is a mechanism to record when the tip of branches are updated. This command is to manage the information recorded in it.</p>

<p>  应用场景:</p>

<ol>
<li>当前的working directory的git log如下图所示:
 <img src="http://fedcuit.github.com/images/2012-10-14-useful-git-commands/before-reset.jpg" alt="git status" /></li>
<li>用户切换到commit 041f088去查看几天之前系统的某个功能，执行:
 <code>git reset --hard 041f088</code></li>
<li>当前的working directory的git log如下图所示:
 <img src="http://fedcuit.github.com/images/2012-10-14-useful-git-commands/after-reset.jpg" alt="git status" /></li>
<li>如果想切换回最新代码, 却发现已经不知道之前的HEAD的commit hash, 此时就可以使用<code>git reflog</code>命令来查看当前分支上的所有操作记录, 从中找到最新代码对应的commit hash:
 <img src="http://fedcuit.github.com/images/2012-10-14-useful-git-commands/reflog.jpg" alt="git status" />
 从<code>git reflog</code>显示的操作记录来看，我们是从commit 4a56876 执行reset操作的，所以之前的HEAD是 4a56876, 执行<code>git reset --hard 4a56876</code>就可以切换回之前的代码.</li>
</ol>
</li>
<li><code>git clean -f</code> <code>git clean -f -d</code><br/>
Remove untracked file from working directory. If <code>-d</code> used, will remove untracked directories in addition to untracked files.</li>
<li><code>git add -p</code><br/>
Interactively choose hunks of patch between the index and the work tree and add them to the index. This gives the user a chance to review the difference before adding modified contents to the index.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xpath 与 jQuery selector 的对应关系]]></title>
    <link href="http://fedcuit.github.com/blog/2012/09/30/xpath-vs-jquery-selector/"/>
    <updated>2012-09-30T17:00:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2012/09/30/xpath-vs-jquery-selector</id>
    <content type="html"><![CDATA[<ul>
<li><em>如果默认是从根找起的话, xpath需要以<code>//</code>开头</em></li>
<li><em>如果使用属性选择器, jQuery的属性值可以不使用引号，但是xpath中属性值必须用引号括起来</em></li>
</ul>


<h2>基本选择器</h2>

<ul>
<li><strong>id</strong>

<ul>
<li><code>$('#import-datasenders')</code></li>
<li><code>$x('//a[@id="import-datasenders"]')</code></li>
</ul>
</li>
<li><strong>class</strong>

<ul>
<li><code>$('a.register_data_sender')</code></li>
<li><code>$x('//a[@class="register_data_sender"]')</code></li>
</ul>
</li>
<li><strong>tag</strong>

<ul>
<li><code>$('a')</code></li>
<li><code>$x('//a')</code></li>
</ul>
</li>
<li><strong>*</strong>

<ul>
<li><code>$('#import-datasenders')</code></li>
<li><code>$x('//*[@id="import-datasenders"]')</code></li>
</ul>
</li>
<li><strong>选择器组</strong>

<ul>
<li><code>$('#import-datasenders, .register_data_sender')</code></li>
<li><code>$x('//*[@id="import-datasenders"]|//*[@class="register_data_sender"]')</code></li>
</ul>
</li>
</ul>


<h2>层次选择器</h2>

<ul>
<li><strong>后代元素</strong>

<ul>
<li><code>$('#my_subjects li')</code></li>
<li><code>$x('//*[@id="my_subjects"]//li')</code></li>
</ul>
</li>
<li><strong>直接子元素</strong>

<ul>
<li><code>$('.secondary_tab&gt;li')</code></li>
<li><code>$x('//*[@class="secondary_tab"]/li')</code></li>
</ul>
</li>
<li><p><strong>下一个兄弟元素</strong></p>

<ul>
<li><ol>
<li><code>$('input+image')</code></li>
<li><code>$('input').next()</code></li>
</ol>
</li>
<li><p><code>$x('//input/following-sibling::img')</code></p></li>
</ul>
</li>
<li><p><strong>上一个兄弟结点</strong></p>

<ul>
<li><code>$('input').prev()</code></li>
<li><code>$x('//input/preceding-sibling::*')</code></li>
</ul>


<p>xpath的这种写法与上面的jQuery写法非常的相似，但是功能并不完全相同. jQuery 会取当前元素的 <strong>紧跟着的</strong> 下一个/上一个 符合条件的兄弟结点, 而xpath会从当前元素的所有兄弟结点中查找符合条件的，但是不保证这个兄弟结点是当前结点的下一个/上一个结点.</p></li>
<li><p><strong>之后的所有兄弟结点</strong></p>

<ul>
<li><ol>
<li><code>$('input~image')</code></li>
<li><code>$('input').nextAll()</code></li>
</ol>
</li>
<li><code>$x('//input/following-sibling::img')</code></li>
</ul>
</li>
<li><p><strong>之前的所有兄弟结点</strong></p>

<ul>
<li><code>$('input').prevAll()</code></li>
<li><code>$x('//input/preceding-sibling::*')</code></li>
</ul>
</li>
<li><strong>所有的兄弟结点</strong>

<ul>
<li><code>$('input').siblings()</code></li>
<li><code>$x('//input/following-sibling::*|//input/preceding-sibling::*')</code></li>
</ul>
</li>
</ul>


<h2>过滤选择器</h2>

<h3>基本过滤选择器</h3>

<ul>
<li><p><strong>:first</strong></p>

<ul>
<li><code>$('ul&gt;li:first')</code></li>
<li><code>$x('//ul/li')[0]</code></li>
</ul>
</li>
<li><p><strong>:last</strong></p>

<ul>
<li><code>$('a:last')</code></li>
<li><code>$x('//a').pop(-1)</code></li>
</ul>


<p>jQuery伪类<code>:first</code>/<code>:last</code>返回的是结果集里面的 第一个/最后一个 元素，这已经与css selector无关了，完全是对数组的操作.</p></li>
<li><p><strong>:even</strong></p></li>
<li><p><strong>:odd</strong></p></li>
<li><p><strong>:eq(index)</strong></p></li>
<li><p><strong>:lt(index)</strong></p></li>
<li><p><strong>:gt(index)</strong></p>

<p>上面这些选择器都是jQuery特有的，他们完全是为了简化对结果集的数组操作.</p></li>
</ul>


<h3>内容过滤选择器</h3>

<ul>
<li><p><strong>:contains(text)</strong></p>

<ul>
<li><code>$('ul&gt;li:contains("Download")')</code></li>
<li><code>$x('//ul/li[contains(text(), "Download")]')</code></li>
</ul>
</li>
<li><p><strong>:empty</strong></p>

<ul>
<li><code>$('a:empty')</code></li>
<li>?</li>
</ul>
</li>
<li><p><strong>:parent</strong></p>

<ul>
<li><code>$('td:parent')</code></li>
<li><code>$x('//text()/parent::td | //*[not(text())]/parent::td')</code></li>
</ul>
</li>
<li><p><strong>:has(selector)</strong></p>

<ul>
<li><code>$('ul:has(a)')</code></li>
<li><code>$x('//a/ancestor::ul')</code></li>
</ul>
</li>
</ul>


<h3>可见性过滤器</h3>

<ul>
<li><strong>:hidden</strong>

<ul>
<li><code>$('input:hidden')</code></li>
<li>?</li>
</ul>
</li>
<li><strong>:visible</strong>

<ul>
<li><code>$('input:visible')</code></li>
<li>?</li>
</ul>
</li>
</ul>


<h3>属性过滤器</h3>

<ul>
<li><p><strong>[attribute]</strong></p>

<ul>
<li><code>$('div[style]')</code></li>
<li><code>$x('//div[@style]')</code></li>
</ul>
</li>
<li><p><strong>[attribute=value]</strong></p>

<ul>
<li><code>$('a[target=_blank]')</code></li>
<li><code>$x('//a[@target="_blank"]')</code></li>
</ul>
</li>
<li><p><strong>[attribute!=value]</strong></p>

<ul>
<li><code>$(':text[name!=email]')</code></li>
<li><ul>
<li><code>$x('//input[@type="text"][@name!="email"]')</code></li>
<li><code>$x('//input[@type="text" and @name!="email"]')</code></li>
</ul>
</li>
</ul>
</li>
<li><p>[attribute<sup>^=value]</sup></p>

<ul>
<li><code>$('input[name^=tel]')</code></li>
<li><code>$x('//input[starts-with(@name, "tel")]')</code></li>
</ul>
</li>
<li><p><strong>[attribute$=value]</strong></p>

<ul>
<li><code>$('input[name$=number]')</code></li>
<li><code>$x('//input[ends-with(@name, "num")]')</code></li>
</ul>


<p><code>ends-with</code>这个function并没有在 chrome console 跟 firebug console中测试通过，个人估计可能是因为xpath的版本问题.</p></li>
<li><p><strong>[attribute*=value]</strong></p>

<ul>
<li><code>$('input[name*=tel]')</code></li>
<li><code>$x('//input[contains(@name, "tel")]')</code></li>
</ul>
</li>
<li><p><strong>[att1][att2][att3]</strong></p>

<ul>
<li><code>$('input[type=text][name*=tel]')</code></li>
<li><code>$x('//input[@type="text"][contains(@name, "tel")]')</code></li>
</ul>
</li>
</ul>


<h3>子元素过滤器</h3>

<ul>
<li><strong>:nth-child</strong>

<ul>
<li><code>$('ul&gt;li:nth-child(1)')</code></li>
<li><code>$x('//ul/li[position()=1]')</code></li>
</ul>
</li>
</ul>


<p> xpath中的<code>position()</code>函数与jQuery的<code>:nth-child</code>伪选择器功能完全相同，而且都是base 0的.</p>

<ul>
<li><p><strong>:first-child</strong></p>

<ul>
<li><code>$('ul&gt;li:first-child')</code></li>
<li><code>$x('//ul/li[position()=1]')</code></li>
</ul>
</li>
<li><p><strong>:last-child</strong></p>

<ul>
<li><code>$('ul&gt;li:last-child')</code></li>
<li><code>$x('//ul/li[last()]')</code></li>
</ul>


<p>xpath中貌似没有<code>first()</code>函数</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实用Shell脚本片段]]></title>
    <link href="http://fedcuit.github.com/blog/2012/09/28/useful-shell-snippets/"/>
    <updated>2012-09-28T22:22:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2012/09/28/useful-shell-snippets</id>
    <content type="html"><![CDATA[<h5>Tips</h5>

<ul>
<li>赋值等号两端不能有空格</li>
<li>使用双引号而不是单引号</li>
<li>有时候需要明确使用${var}而不是$var</li>
</ul>


<h5>解释器选项</h5>

<ul>
<li><code>-e</code> Exit on error</li>
<li><code>-x</code> Expand command</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#! /bin/bash -ex</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h5>条件判断</h5>

<ul>
<li><code>[ -d ~/directory ] || mkdir ~/directory</code> 如果目录不存在，则创建此目录</li>
<li><code>[ -f ~/file ] || touch ~/file</code> 如果文件不存在，则创建此文件</li>
<li><code>[[ str =~ substr ]]</code>判断字符串中包含另一个字符串</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">function </span>verify_md5<span class="o">(){</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[[</span> <span class="nv">$1</span> <span class="o">=</span>~ <span class="nv">$2</span> <span class="o">]]</span>
</span><span class='line'>    <span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nb">echo</span> <span class="s2">&quot;MD5 verification SUCCESS for $1.&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'><span class="k">        </span><span class="nb">echo</span> <span class="s2">&quot;MD5 verification FAILED for $1.&quot;</span>
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h5>文件操作</h5>

<p>想了解更多跟条件判断相关的bash命令，可以在<code>man bash</code>之后的查找对应的<em>CONDITIONAL EXPRESSIONS</em>部分.</p>

<ul>
<li><code>sed -i .bak 's/old/new/g' file</code> 首先生成file的备份文件file.bak, 然后将file文件中出现的所有old替换成new</li>
<li><code>echo "some content" &gt;&gt; ~/file</code> 向文件末尾添加内容</li>
<li><code>mv original_file_name{,.new_suffix}</code> 将original_file_name重命名为original_file_name.new_suffix</li>
</ul>


<hr />

<h5>函数操作</h5>

<ul>
<li>函数的定义与调用
风格上与Javascript相似，但是函数的定义与调用都不需要加括号，<strong>shell函数不使用括号</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">function </span>main <span class="o">{</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;in main function&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>main
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>参数的传递
Shell函数没有参数列表这个概念, 在函数内部通过$n来接受第n个位置上的参数</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">function </span>greeting <span class="o">{</span>
</span><span class='line'>    <span class="nb">echo</span> <span class="s2">&quot;Hello, $1, your id is $2&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>main <span class="o">{</span>
</span><span class='line'>    greeting <span class="s2">&quot;Feng Erdong&quot;</span> edfeng
</span><span class='line'>    greeting <span class="s2">&quot;Zhang xiaoming&quot;</span> xmzhang
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>main
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python中的时间与日期]]></title>
    <link href="http://fedcuit.github.com/blog/2012/09/24/date-time-in-python/"/>
    <updated>2012-09-24T21:17:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2012/09/24/date-time-in-python</id>
    <content type="html"><![CDATA[<ul>
<li><code>dateutil.parser.parse</code> 将一个日期字符串转换为带时区信息的日期对象</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">dateutil.parser</span> <span class="kn">import</span> <span class="n">parse</span>
</span><span class='line'>
</span><span class='line'><span class="n">date</span> <span class="o">=</span> <span class="n">parse</span><span class="p">(</span><span class="s">&quot;08.10.2012&quot;</span> <span class="o">+</span> <span class="s">&quot; 00:00:00+0000&quot;</span><span class="p">,</span> <span class="n">dayfirst</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span><span class="n">date</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2012</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="n">tzutc</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="n">date</span> <span class="o">=</span> <span class="n">parse</span><span class="p">(</span><span class="s">&quot;08.10.2012&quot;</span> <span class="o">+</span> <span class="s">&quot; 00:00:00+0000&quot;</span><span class="p">,</span> <span class="n">dayfirst</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span><span class="n">date</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2012</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="n">tzutc</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>如果使用的python版本是2.x, 需要使用的python-dateutil的版本是1.x, python-dateutil 2.x版本需要python3.x支持</em></p>

<ul>
<li><code>datetime.timedelta</code> 在日期对象上添加偏移量</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">timedelta</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span><span class="n">date</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2012</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="n">tzutc</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="n">date</span> <span class="o">=</span> <span class="n">date</span> <span class="o">+</span> <span class="n">timedelta</span><span class="p">(</span><span class="n">days</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span><span class="n">date</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2012</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="n">tzutc</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="n">date</span> <span class="o">=</span> <span class="n">date</span> <span class="o">+</span> <span class="n">timedelta</span><span class="p">(</span><span class="n">hours</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span><span class="n">date</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2012</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="n">tzutc</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>datetime.datetime.strptime</code> 将日期字符串转换为日期对象</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
</span><span class='line'>
</span><span class='line'><span class="n">date</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="s">&#39;2012.08.10&#39;</span><span class="p">,</span> <span class="s">&#39;%Y.%m.</span><span class="si">%d</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span><span class="n">date</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2012</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Visual Reference Notes]]></title>
    <link href="http://fedcuit.github.com/blog/2012/08/11/notes-of-visual-git-reference/"/>
    <updated>2012-08-11T00:59:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2012/08/11/notes-of-visual-git-reference</id>
    <content type="html"><![CDATA[<p>This notes is written after reading <a href="http://marklodato.github.com/visual-git-guide/index-en.html">A Visual Git Reference</a></p>

<p><img src="http://marklodato.github.com/visual-git-guide/basic-usage.svg" alt="basic usage" /></p>

<ul>
<li><p><strong>git add</strong> <em>copy file from working directory to INDEX/stage</em></p></li>
<li><p><strong>git commit</strong> <em>save a snapshot of files in INDEX/stage to repo</em></p>

<ul>
<li><code>git commit -a</code><br/>
(first git add all filenames that existed in the latest commit, and then running git commit) when we only modified some file after last commit, then we can directly use <code>git commit -a</code> to skip the git add step.</li>
</ul>
</li>
<li><p><strong>git checkout</strong> <em>copy from commit history(local repo) to INDEX and working directory</em></p>

<ul>
<li><code>git checkout HEAD files</code> <br/>
copies files from the latest commit to both the stage and the working directory.</li>
<li><code>git checkout local_branch</code><br/>
if files are not passed, then copy all files from that commit point to both INDEX and working directory, and remove files not in that commit.</li>
<li><code>git checkout tag/remote_branch/commit-hash/relative-commit files</code> <br/>
copy files from specified commit to INDEX and working directory, if commit-hash is not passed, then copy files from INDEX to working directory.</li>
<li><code>git checkout tag/remote_branch/commit-hash/relative-commit</code>
<strong>IF</strong>

<ol>
<li>files are not passed</li>
<li>not checkout from a local branch  <br/>
<strong>THEN</strong> an anonymous branch is created call detached HEAD, afterward commit will be base on detached HEAD, if switch to another branch, all commit in detached HEAD will be lost, if commits want be stored, it&#8217;s better to use &#8216;git checkout -b new_branch_name&#8217; to create a branch rather than use the anonymous branch.</li>
</ol>
</li>
</ul>
</li>
<li><p><strong>git reset</strong> <em>Move current branch to another position, and update INDEX</em></p>

<ul>
<li><code>git reset commit-hash</code>
move current branch(HEAD) to specified position, and update stage to match the commit-hash. if &#8211;hard is given, also update working directory. if &#8211;soft is given, neither is updated.</li>
<li><code>git reset</code>
no commit-hash given, default to HEAD, move to HEAD, means, branch is not moved, but stage is updated with last commit.</li>
<li><code>git reset [commit-hash] files</code>
move to specified commit-hash and update files in INDEX to match that commit. If commit-hash it not given, it defaults to HEAD.</li>
</ul>
</li>
<li><p><strong>git merge</strong></p>

<ul>
<li><code>git merge from_branch</code>
if other commit is ancestor of current commit, do nothing. if current commit is ancestor of other commit, results in a fast-forward merge. if current commit and other commit are not on the same line, then a real merge occur, git find out the common ancestor of the two commits, do merge with the three part, saving the result to both index and working directory, if no conflict, then do a new commit.</li>
</ul>
</li>
<li><p><strong>git cherry-pick</strong></p>

<ul>
<li><code>git cherry-pick commit-on-other-branch</code>
copy a commit, creating a new commit on the current branch with the same message and patch as another commit.</li>
</ul>
</li>
<li><p><strong>git rebase</strong> <em>replay commits of another branch onto the current branch, it just like a series of git cherry-pick call</em></p>

<ul>
<li><code>git rebase from_branch</code>
git merge will generate a new commit with two parents, but after git rebase, the last new commit only have one parent, and all old commits will be deleted.</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常见的 python http library使用]]></title>
    <link href="http://fedcuit.github.com/blog/2012/08/04/python-http-lib/"/>
    <updated>2012-08-04T13:49:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2012/08/04/python-http-lib</id>
    <content type="html"><![CDATA[<ul>
<li>urllib2</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">urllib2</span>
</span><span class='line'>
</span><span class='line'><span class="n">response</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="s">&#39;http://www.google.com&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">response</span><span class="o">.</span><span class="n">read</span><span class="p">()</span> <span class="c">#return content of requsted url in string format</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[容易被误用的jQuery API]]></title>
    <link href="http://fedcuit.github.com/blog/2012/08/04/easy-misused-jquery-api/"/>
    <updated>2012-08-04T13:05:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2012/08/04/easy-misused-jquery-api</id>
    <content type="html"><![CDATA[<ul>
<li><code>closest()/parents()</code>
这两个api只查询祖先节点(有血缘关系的)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery事件处理杂记]]></title>
    <link href="http://fedcuit.github.com/blog/2012/08/04/jquery-event-handling/"/>
    <updated>2012-08-04T12:30:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2012/08/04/jquery-event-handling</id>
    <content type="html"><![CDATA[<ul>
<li>在<code>.on()</code>中判断事件源<br/>
  jQuery的事件处理函数中默认存在<code>event</code>这个对象， 在使用<code>on</code> 这种事件委托机制时，有时候我们想监听的特定元素的事件在收到之前就已经被其他外层的元素捕获到了，这个时候可以通过<code>event.target.nodeName</code>来拿到真正的事件源的结点名。注意，结点名是大写的.</li>
</ul>


<figure class='code'><figcaption><span>a simple demo may be not that reasonable</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#resultTable&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">//show edit form when click on tr</span>
</span><span class='line'><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="s2">&quot;tr&quot;</span><span class="p">,</span> <span class="nx">showUpdateEventForm</span><span class="p">)</span>
</span><span class='line'><span class="c1">//enable/disable toolbar button when click inner checkbox of tr</span>
</span><span class='line'><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="s2">&quot;tr&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">isCheckboxClicked</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">nodeName</span> <span class="o">==</span> <span class="s1">&#39;INPUT&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isCheckboxClicked</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">$checkbox</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;:checkbox&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">$checkbox</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;checked&#39;</span><span class="p">,</span> <span class="o">!</span><span class="nx">$checkbox</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;checked&#39;</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">$toolbarButtons</span><span class="p">.</span><span class="nx">refresh</span><span class="p">();</span>
</span><span class='line'>    <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>建议在<code>.on()</code>的事件处理函数中显式接受event对象<br/>
  在chrome中，我们可以直接在<code>on()</code>指定的事件处理函数中使用<code>event</code>对象而不用显式传递这个<code>event</code>,但是在Firefox下必须显式传递这个event对象.</p></li>
<li><p>使用事件委托避免inline事件注册<br/>
   当使用requireJS, text来异步加载html片段到页面时，这个时间整个页面已经加载完毕，因为无法再给这段html片段中的元素添加事件监听，如果想在这段html片段中使用inline javascript来注册事件的话，又需要使用全局的javascript对象，这违背了使用requireJS来管理javascript的初衷。<br/>
   一种比较好的解决办法是，在这段html片段的父元素上使用事件委托机制来监听他的子元素上发生的事件，这样即使这段html片段是后来加入到页面的，也完全可以在$()中完成事件注册.</p></li>
</ul>

]]></content>
  </entry>
  
</feed>

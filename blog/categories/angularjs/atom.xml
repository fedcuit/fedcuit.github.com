<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: angularjs | Feng erdong's Blog]]></title>
  <link href="http://fedcuit.github.com/blog/categories/angularjs/atom.xml" rel="self"/>
  <link href="http://fedcuit.github.com/"/>
  <updated>2014-01-11T20:47:57+08:00</updated>
  <id>http://fedcuit.github.com/</id>
  <author>
    <name><![CDATA[Feng erdong]]></name>
    <email><![CDATA[fedcuit@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Traps in Angular Directive -- Return False]]></title>
    <link href="http://fedcuit.github.com/blog/2014/01/11/traps-in-directive-return-false/"/>
    <updated>2014-01-11T20:44:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2014/01/11/traps-in-directive-return-false</id>
    <content type="html"><![CDATA[<h2>Return false will prevent default browser behavior</h2>

<p>I was blocked for whole afternoon by a very weird phenomenon, two radio buttons(with the same name), one of them can never be checked after you click it, at the last, I found out the root cause is the browser's default behavior is prevented by the <code>return false</code> statement in directive.</p>

<p>Let's see what a normal radio button group should be:
```html
<body></p>

<pre><code>&lt;div&gt;
    &lt;div&gt;
        &lt;input type="text" name="" id=""&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;input type="radio" name="gender" id="female"&gt;
        &lt;label for="female"&gt;Female&lt;/label&gt;
        &lt;input type="radio" name="gender" id="male"&gt;
        &lt;label for="male"&gt;Male&lt;/label&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p></body>
```
check the <a href="http://jsbin.com/iKelIko/2/edit?html,css,js,output">Demo</a>, click a radio button can make it checked.</p>

<p>Now let's make some trouble, if we click a text input field, we want to show a console log say 'input field clicked', if other type input component is clicked, do nothing. let's write a directive to handle this.
```html
<body ng-app="Demo" ng-controller="DemoController"></p>

<pre><code>&lt;div tell-me&gt;
    &lt;div&gt;
        &lt;input type="text" name="" id=""&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;input type="radio" name="gender" id="female"&gt;
        &lt;label for="female"&gt;Female&lt;/label&gt;
        &lt;input type="radio" name="gender" id="male"&gt;
        &lt;label for="male"&gt;Male&lt;/label&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p></body>
<code>
</code>javascript
angular.module('Demo', [])</p>

<pre><code>.controller('DemoController', ['$scope',
    function ($scope) {}
])
.directive('tellMe', [
    function () {
        return {
            link: function (scope, element, attr) {
                element.bind('click', function () {
                    var target = angular.element(event.target);
                    if (!target.is(':text')) {
                        return false;
                    } else {
                        console.log('input field clicked');
                    }
                });
            }
        };
    }
]);
</code></pre>

<p><code>``
Check the [demo](http://jsbin.com/alovifeJ/4/edit?output), you'll see the radion button group is not functional well, one of them can never be checked, this is all because we use</code>return false` in directive.</p>

<p>After we replace <code>return false</code> with <code>return</code>, everything back to normal, check again <a href="http://jsbin.com/alovifeJ/5/edit?output">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Traps in Angular Directive -- Isolated Scope]]></title>
    <link href="http://fedcuit.github.com/blog/2014/01/10/traps-in-directive/"/>
    <updated>2014-01-10T10:10:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2014/01/10/traps-in-directive</id>
    <content type="html"><![CDATA[<p>I was trapped in angular directive this work, after struggled for hours, I noticed below traps in angular directive.</p>

<h2>Directive with isolated scope will impact native angular directive</h2>

<p>If your own directive has a isolated scope,  then it will impact native angular directive, which means, sometime, ngModel, ngDisabled suddenly doesn't work, because they're impacted by your directive.
take below as an example:</p>

<p>We have a input field to type in a programming language, click the 'Add' button will add it into a list(as it's a simple demo, so data validation is not concerned)</p>

<p>```html
<body ng-app="DemoApp"></p>

<pre><code>&lt;div ng-controller="DemoController"&gt;
    What's your favorite programming language (up to five):
    &lt;input type="search" ng-model="profile.newLanguage" /&gt;
    &lt;input type="button" 
        value="Add" 
        add-language 
        languages="profile.languages" 
        new-language="profile.newLanguage" /&gt;
    &lt;div&gt;
        &lt;ul&gt;
            &lt;li ng-repeat="language in profile.languages"&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p></body>
```</p>

<p>```javascript
angular.module('DemoApp', [])</p>

<pre><code>.controller('DemoController', ["$scope",
    function ($scope) {
        $scope.profile = {};
        $scope.profile.languages = [];
    }
])
.directive('addLanguage', [
    function () {
        return {
            scope: {
                languages: '=',
                newLanguage: '='
            },
            link: function (scope, ele, attr) {
                ele.on('click', function () {
                    scope.languages.push(scope.newLanguage);
                    scope.$apply();
                });
            }
        };
    }
]);
</code></pre>

<p>```</p>

<p>we put a directive <code>addLanuage</code> on the button, which will get the value in the input field and add it to language list, due to we need to operate the language list, so we use a isolated scope to access it inside the directive.</p>

<p>Try it yourself. <a href="http://jsbin.com/emivixEz/5/embed?output">Demo</a></p>

<p>Now the new requirement comes, a user only allow to fill up to five programming languages, we need to disable the <code>Add</code> button after user have input 5 languages.</p>

<p>Seems a small change will fit the new requirement, ngDisabled should solve this.</p>

<p>```html
&lt;input</p>

<pre><code>type="button" 
value="Add" 
add-language 
ngDisabled="reachThreshold()" 
languages="profile.languages" 
new-language="profile.newLanguage" /&gt;
</code></pre>

<p>```</p>

<p>```javascript
angular.module('DemoApp', [])</p>

<pre><code>.controller('DemoController', ["$scope",
    function ($scope) {
        $scope.profile = {};
        $scope.profile.languages = [];
        $scope.reachThreshold = function () {
            return $scope.profile.languages.length === 5;
        };
    }
])
.directive('addLanguage', [
    function () {
        return {
            scope: {
                languages: '=',
                newLanguage: '='
            },
            link: function (scope, ele, attr) {
                ele.on('click', function () {
                    scope.languages.push(scope.newLanguage);
                    scope.$apply();
                });
            }
        };
    }
]);
</code></pre>

<p><code>``
Play with the updated code you'll find out</code>ngDisabled` is not working!
<a href="http://jsbin.com/itOTase/3/edit?output">Demo</a></p>

<p>What can we do to save the <code>ngDisabled</code> damaged by isolated scope.
```html
<body ng-app="DemoApp"></p>

<pre><code>&lt;div ng-controller="DemoController"&gt;
    Programming language:
    &lt;input type="search" ng-model="profile.newLanguage" /&gt;
    &lt;input type="button" 
        value="Add" 
        add-language 
        needs-disabled="reachThreshold()" 
        ng-disabled="needsDisabled" 
        languages="profile.languages" 
        new-language="profile.newLanguage" /&gt;
    &lt;div&gt;
        &lt;ul&gt;
            &lt;li ng-repeat="language in profile.languages"&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p></body>
<code>
</code>javascript
angular.module('DemoApp', [])</p>

<pre><code>.controller('DemoController', ["$scope",
    function ($scope) {
        $scope.profile = {};
        $scope.profile.languages = ['a', 'a', 'a', 'a', 'a'];
        $scope.reachThreshold = function () {
            return $scope.profile.languages.length === 5;
        };
    }
])
.directive('addLanguage', [
    function () {
        return {
            scope: {
                languages: '=',
                newLanguage: '=',
                needsDisabled: '='
            },
            link: function (scope, ele, attr) {
                ele.on('click', function () {
                    scope.languages.push(scope.newLanguage);
                    scope.$apply();
                });
            }
        };
    }
]);
</code></pre>

<p><code>``
Now</code>ngDisabled` works, <a href="http://jsbin.com/ONiFagE/2/edit?html,js,output">Demo</a></p>

<p>As you can see from the code, we declare a new attribute <code>needs-disabled</code> which use <code>reachThreshold()</code> as it's value, then we set <code>needsDisabled</code> to <code>ng-disabled</code>, the last thing is to declare the new attribute in directive's scope, in this way, <code>ngDisabled</code> back again.</p>

<h2>NO Multiple isolated scope</h2>

<p>If you put more than one directive on a element, and each of them has a isolated scope, angular will fail and complain multiple isolated scope on one element.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Master AngularJS - directives]]></title>
    <link href="http://fedcuit.github.com/blog/2014/01/07/directive-in-angularjs/"/>
    <updated>2014-01-07T20:12:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2014/01/07/directive-in-angularjs</id>
    <content type="html"><![CDATA[<p>I've been using angularjs for several months, at the beginning, i always think everything in jQuery way, since I've used jQuery heavily on all of my previous projects, but day by day
I became like angularjs, i realize the shortcoming of jQuery: you will not know who is responsile for the event happens on this element until you see the event binding in jQuery code;
lots of manipulation is based on css selector which is fragile; it's also hard and tricky to transfer data between different element ...</p>

<p>So I decide to write a series of articles to record what I've learned in the past months, these articles are not for beginners, I assume you have a basic concept with AngularJS, but still don't know
how to write AngularJS in the right way. Let's start with <strong>directives</strong> .</p>

<h2>Directive Definition Object</h2>

<p>A directive usually appears as a element/tag name or attribute, it's used to add additional functionality to the element, like, <code>&lt;a toggle-background/&gt;</code>, the directive toggleBackground will switch the
background color of the current page once you click it, it's more clear than implement the same logic with jQuery, you will understand what will happen when you see the directive on the link.</p>

<p>Let's take a closer look to directives, below is a simple directive defination.
```javascript
angular.module("app", []).directive("alert", [</p>

<pre><code>function () {
    return {
        restrict: 'EA',
        link: function (scope, elm, attr) {}
    };
}
</code></pre>

<p>]);
```</p>

<h2>Link Function</h2>

<p>we can ignore the <code>restrict</code> property, by default a directive can appear as a attribute, let's goes into the most important part in a directive: the <strong>link function</strong> .</p>

<p>The link function take three parameters: <code>scope</code>, <code>elm</code>, <code>attr</code>, the last two are easy to understand:</p>

<ul>
<li><em><code>elm</code></em> the jQuery object representation of the element which this directve blongs to</li>
</ul>


<p>Take below code as an example, then most common use of directive is to do something against the element it decorated, in below example, we add autocomplete functionality for a input field.
```html
<body ng-app="DemoApp"></p>

<pre><code>&lt;div&gt;
    What's your favorite programming language:
    &lt;input type="search" search-language/&gt;
&lt;/div&gt;
</code></pre>

<p></body>
<code>
</code>javascript
angular.module('DemoApp', [])</p>

<pre><code>.directive('searchLanguage', [
    function () {
        return {
            link: function (scope, ele, attr) {
                jQuery(ele).autocomplete({
                    source: ["c++", "java", "php", "coldfusion", "javascript", "asp", "ruby"]
                });
            }
        };
    }
]);
</code></pre>

<p>```
See demo <a href="http://jsbin.com/iZAxoVEF/1/edit">here</a></p>

<ul>
<li><em><code>attr</code></em> all the attributes on this element, it's a map of attribute name and value, given <code>&lt;a type="text" some-directive/&gt;</code>, <code>attr.type</code> will return <code>text</code>
<code>attr</code> are used to pass additional information to directive, it has the same functionallity with <code>jQuery(element).attr('attrName')</code>, but more convenient.</li>
</ul>


<p>In below exmaple, we config the autocomplete dropdown is triggered at least user input 3 characters.
```html
<body ng-app="DemoApp"></p>

<pre><code>&lt;div&gt;
    What's your favorite programming language:
    &lt;input type="search" search-language min-length="3"/&gt;
&lt;/div&gt;
</code></pre>

<p></body>
<code>
</code>javascript
angular.module('DemoApp', [])</p>

<pre><code>.directive('searchLanguage', [
    function () {
        return {
            link: function (scope, ele, attr) {
                jQuery(ele).autocomplete({
                    source: ["c++", "java", "php", "coldfusion", "javascript", "asp", "ruby"],
                    minLength: attr.minLength
                });
            }
        };
    }
]);
</code></pre>

<p>```
see demo <a href="http://jsbin.com/emivixEz/1/edit">here</a></p>

<h2>(Isolated) Scope</h2>

<p>Why we need scope for directive ? First, let's devide all kinds of directves into two groups:</p>

<ul>
<li><p><em><code>without scope</code></em>
If what we do in this the directive is only DOM manipulation, then <code>elm</code> and <code>attr</code> is enough for use, we don't need to declare a isolated scope.</p></li>
<li><p><em><code>with scope</code></em>
If we need to manipulate angular model in directive, then we need to declare a scope.</p></li>
</ul>


<p>directive which don't need to use scope is easy to understand, usually we bind event listener on the link function, but directive which need scope requires more practice to master it, we also can
devide this kind of directives into two groups: <code>manipulate model in controller</code> and <code>call method in controller</code></p>

<h4>Manipulate Model in Controller</h4>

<p>access model in controller need to establish a isolated scope, there are two ways:</p>

<ul>
<li><code>@[attributeName]</code> return the value of that attributeName, the value is a plain string, it's the same as using <code>attr.attributeName</code></li>
<li><code>=[attributeName]</code> two way binding, first get the value of that attributeName, then evaluate the value in controller scope, changing the value in directive will reflect in controller scope</li>
</ul>


<p>Need to design a example for this...</p>

<h4>Call Method in Controller</h4>

<ul>
<li><code>&amp;[attributeName]</code> return the value of that attributeName, the value is a function reference which points to the a method whose name same as the value in controller.</li>
</ul>


<p>Need to design a example for this....</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: directive | Feng erdong's Blog]]></title>
  <link href="http://fedcuit.github.com/blog/categories/directive/atom.xml" rel="self"/>
  <link href="http://fedcuit.github.com/"/>
  <updated>2015-04-07T12:59:42+08:00</updated>
  <id>http://fedcuit.github.com/</id>
  <author>
    <name><![CDATA[Feng erdong]]></name>
    <email><![CDATA[fedcuit@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing Directive - Call controller method in default scope]]></title>
    <link href="http://fedcuit.github.com/blog/2014/06/27/test-directive-call-controller-method-in-default-scope/"/>
    <updated>2014-06-27T14:17:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2014/06/27/test-directive-call-controller-method-in-default-scope</id>
    <content type="html"><![CDATA[<h2>Call controller method in default scope</h2>

<p>```html</p>

<div ng-controller="FruitController" ng-init="init()">
    <h4>Call controller method in default scope</h4>
    <label>What's your favorite fruit(name can only contains letter)</label>
    <input type="text" ng-model="newFruit"/>
    <button type="button" add-fruit-method>validate and add</button>
    <ul>
        <li ng-repeat="fruit in fruits track by $index"></li>
    </ul>
</div>


<p><code>
This time, we want to validate the fruit name use typed in first, if it only contains letter, then it's eligible to add in, otherwise nothing happen. The validation logic is defined in controller, we need to test the validation method is called inside our directive.
</code>javascript
describe('directives', function () {</p>

<pre><code>beforeEach(module('myApp.directives'));

describe('addFruitMethod', function () {
    var $scope, element;
    beforeEach(inject(function ($rootScope, $compile) {
        $scope = $rootScope;
        $scope.fruits = [];
        $scope.newFruit = 'apple';
        $scope.isValid = angular.noop;

        element = angular.element('&lt;input type="text" name="fruit" id="fruitDefault" ng-model="newFruit"/&gt;&lt;button type="button" add-fruit-method&gt;validate and add&lt;/button&gt;');
        $compile(element)($scope);
    }));

    it('should add valid fruit to fruit list when click button', function () {
        var isValid = spyOn($scope, 'isValid').andReturn(true);

        element.filter('button').trigger('click');

        expect(isValid).toHaveBeenCalled();
        expect($scope.fruits[0]).toBe('apple');

    });

    it('should reject invalid fruit when click button', function () {
        var isValid = spyOn($scope, 'isValid').andReturn(false);

        element.filter('button').trigger('click');

        expect(isValid).toHaveBeenCalled();
        expect($scope.fruits.length).toBe(0);
    });
});
</code></pre>

<p>});
```
It's very similar with testing manipulate data on default scope, the only thing different is we spy on the validation method to verify it has been called, also we let the spy object return the corresponding result to execute each branch.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Directive - Model manipulation with isolated scope]]></title>
    <link href="http://fedcuit.github.com/blog/2014/06/27/test-directive-model-manipulation-with-isolated-scope/"/>
    <updated>2014-06-27T14:15:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2014/06/27/test-directive-model-manipulation-with-isolated-scope</id>
    <content type="html"><![CDATA[<h2>Model manipulation with isolated scope</h2>

<p>```html</p>

<div ng-controller="FruitController" ng-init="init()">
    <h4>Model manipulation with isolated scope</h4>
    <label>What's your favorite fruit</label>
    <input type="text" ng-model="newFruit"/>
    <button type="button" add-fruit fruits="fruits" new-fruit="newFruit">Add</button>
    <ul>
        <li ng-repeat="fruit in fruits track by $index"></li>
    </ul>
</div>


<p><code>
The above directive manipulate data in default scope, now we create a isolated scope for the directive, the test point change to verify the data on isolated scope.
</code>javascript
describe('directives', function () {</p>

<pre><code>beforeEach(module('myApp.directives'));

describe('addFruit', function () {
    var $scope, element;
    beforeEach(inject(function ($rootScope, $compile) {
        $scope = $rootScope;
        $scope.fruits = [];
        $scope.newFruit = 'apple';
        element = angular.element('&lt;input type="text" ng-model="newFruit"/&gt;&lt;button type="button" add-fruit fruits="fruits" new-fruit="newFruit"&gt;Add&lt;/button&gt;');

        $compile(element)($rootScope);
    }));
    it('should add fruit to fruit list when click button', function () {
        element.filter('button').trigger('click');

        expect(element.scope().fruits[0]).toBe('apple'); // use element.scope() to access isolated scope
        expect($scope.fruits[0]).toBe('apple'); // also verify default scope is updated
    })
});
</code></pre>

<p>});
<code>``
In the test, we setup the surrounding scope, then verify both the default scope and isolated scope are updated.(we use</code>element.scope()` to access the isolated scope).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Directive - Basic Dom Manipulation]]></title>
    <link href="http://fedcuit.github.com/blog/2014/06/27/test-directive-basic-dom-manipulation/"/>
    <updated>2014-06-27T14:08:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2014/06/27/test-directive-basic-dom-manipulation</id>
    <content type="html"><![CDATA[<h2>Basic Dom Manipulation</h2>

<p>```html</p>

<div>
    <h4>Basic Dom Manipulation</h4>
    <input type="text" name="search" id="search"/>
    <button type="button" clear-search>Clear</button>
</div>


<p><code>``
We're going to write a directive for the button, after click it, the search box wil be clear.
To demonstrate DOM manipulation, we'll not set</code>ngModel` for the search box. Let's write out the test first.</p>

<p>```javascript
describe('directives', function () {</p>

<pre><code>beforeEach(module('myApp.directives'));

describe('clearSearch', function () {
    var $scope, element;
    beforeEach(inject(function ($rootScope, $compile) {
        $scope = $rootScope;
        element = angular.element('&lt;input type="text"/&gt;&lt;button type="button" clear-search&gt;Clear&lt;/button&gt;');

        $compile(element)($scope);
    }));
    it('should clear search box when click clear button', inject(function ($rootScope, $compile) {
        var val = spyOn(jQuery.fn, 'val');
        var prev = spyOn(jQuery.fn, 'prev');

        element.filter('input').val('some value');
        element.filter('button').trigger('click');

        expect(val).toHaveBeenCalled();
        expect(val.mostRecentCall.args[0]).toBe('');
    }));
});
</code></pre>

<p>});
<code>
To be honest, directive which only manipulate DOM doesn't need scope, so we can remove scope in test, the test still can pass.
</code>javascript
describe('directives', function () {</p>

<pre><code>beforeEach(module('myApp.directives'));

describe('clearSearch', function () {
    var element;
    beforeEach(inject(function ($rootScope, $compile) {
        element = angular.element('&lt;input type="text"/&gt;&lt;button type="button" clear-search&gt;Clear&lt;/button&gt;');

        $compile(element)({});
    }));
    it('should clear search box when click clear button', inject(function ($rootScope, $compile) {
        var val = spyOn(jQuery.fn, 'val');
        var prev = spyOn(jQuery.fn, 'prev');

        element.filter('input').val('some value');
        element.filter('button').trigger('click');

        expect(val).toHaveBeenCalled();
        expect(val.mostRecentCall.args[0]).toBe('');
    }));
});
</code></pre>

<p>});
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing With Angular -- Directive]]></title>
    <link href="http://fedcuit.github.com/blog/2014/01/19/testing-with-angular-directives/"/>
    <updated>2014-01-19T21:22:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2014/01/19/testing-with-angular-directives</id>
    <content type="html"><![CDATA[<p>As a Java developer, I am familiar with test driven development with Java language, but for angular, I'm not, sometime it's even hard to write angular test after the implementation is done.
So I'll write a series of articles about how to test with angular, basically, I'd like to include the test strategy for directives, controllers and services, this article will begin with how to test angular directive.</p>

<p>Let's check out the below examples form easy to hard.</p>

<ul>
<li><a href="/blog/2014/06/27/test-directive-basic-dom-manipulation/">Basic Dom manipulation</a></li>
<li><a href="/blog/2014/06/27/test-directive-model-manipulation-with-default-scope/">Model Manipulation With Default Scope</a></li>
<li><a href="/blog/2014/06/27/test-directive-model-manipulation-with-isolated-scope/">Model Manipulation With Isolated Scope</a></li>
<li><a href="/blog/2014/06/27/test-directive-call-controller-method-in-default-scope/">Call Controller Method in Default Scope</a></li>
<li><a href="/blog/2014/06/27/test-directive-call-controller-method-via-isolated-scope/">Call Controller Method via Isolated Scope</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Traps in Angular Directive -- Return False]]></title>
    <link href="http://fedcuit.github.com/blog/2014/01/11/traps-in-directive-return-false/"/>
    <updated>2014-01-11T20:44:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2014/01/11/traps-in-directive-return-false</id>
    <content type="html"><![CDATA[<h2>Return false will prevent default browser behavior</h2>

<p>I was blocked for whole afternoon by a very weird phenomenon, two radio buttons(with the same name), one of them can never be checked after you click it, at the last, I found out the root cause is the browser's default behavior is prevented by the <code>return false</code> statement in directive.</p>

<p>Let's see what a normal radio button group should be:
```html
<body></p>

<pre><code>&lt;div&gt;
    &lt;div&gt;
        &lt;input type="text" name="" id=""&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;input type="radio" name="gender" id="female"&gt;
        &lt;label for="female"&gt;Female&lt;/label&gt;
        &lt;input type="radio" name="gender" id="male"&gt;
        &lt;label for="male"&gt;Male&lt;/label&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p></body>
```
check the <a href="http://jsbin.com/iKelIko/2/edit?html,css,js,output">demo</a>, click a radio button can make it checked.</p>

<p>Now let's make some trouble, if we click a text input field, we want to show a console log say 'input field clicked', if other type input component is clicked, do nothing. let's write a directive to handle this.
```html
<body ng-app="Demo" ng-controller="DemoController"></p>

<pre><code>&lt;div tell-me&gt;
    &lt;div&gt;
        &lt;input type="text" name="" id=""&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;input type="radio" name="gender" id="female"&gt;
        &lt;label for="female"&gt;Female&lt;/label&gt;
        &lt;input type="radio" name="gender" id="male"&gt;
        &lt;label for="male"&gt;Male&lt;/label&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p></body>
<code>
</code>javascript
angular.module('Demo', [])</p>

<pre><code>.controller('DemoController', ['$scope',
    function ($scope) {}
])
.directive('tellMe', [
    function () {
        return {
            link: function (scope, element, attr) {
                element.bind('click', function () {
                    var target = angular.element(event.target);
                    if (!target.is(':text')) {
                        return false;
                    } else {
                        console.log('input field clicked');
                    }
                });
            }
        };
    }
]);
</code></pre>

<p><code>``
Check the [demo](http://jsbin.com/alovifeJ/4/edit?output), you'll see the radion button group is not functional well, one of them can never be checked, this is all because we use</code>return false` in directive.</p>

<p>After we replace <code>return false</code> with <code>return</code>, everything back to normal, check again <a href="http://jsbin.com/alovifeJ/5/edit?output">here</a></p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: directive | Feng erdong's Blog]]></title>
  <link href="http://fedcuit.github.com/blog/categories/directive/atom.xml" rel="self"/>
  <link href="http://fedcuit.github.com/"/>
  <updated>2014-01-19T13:13:58+08:00</updated>
  <id>http://fedcuit.github.com/</id>
  <author>
    <name><![CDATA[Feng erdong]]></name>
    <email><![CDATA[fedcuit@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Traps in Angular Directive -- Return False]]></title>
    <link href="http://fedcuit.github.com/blog/2014/01/11/traps-in-directive-return-false/"/>
    <updated>2014-01-11T20:44:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2014/01/11/traps-in-directive-return-false</id>
    <content type="html"><![CDATA[<h2>Return false will prevent default browser behavior</h2>

<p>I was blocked for whole afternoon by a very weird phenomenon, two radio buttons(with the same name), one of them can never be checked after you click it, at the last, I found out the root cause is the browser's default behavior is prevented by the <code>return false</code> statement in directive.</p>

<p>Let's see what a normal radio button group should be:
```html
<body></p>

<pre><code>&lt;div&gt;
    &lt;div&gt;
        &lt;input type="text" name="" id=""&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;input type="radio" name="gender" id="female"&gt;
        &lt;label for="female"&gt;Female&lt;/label&gt;
        &lt;input type="radio" name="gender" id="male"&gt;
        &lt;label for="male"&gt;Male&lt;/label&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p></body>
```
check the <a href="http://jsbin.com/iKelIko/2/edit?html,css,js,output">demo</a>, click a radio button can make it checked.</p>

<p>Now let's make some trouble, if we click a text input field, we want to show a console log say 'input field clicked', if other type input component is clicked, do nothing. let's write a directive to handle this.
```html
<body ng-app="Demo" ng-controller="DemoController"></p>

<pre><code>&lt;div tell-me&gt;
    &lt;div&gt;
        &lt;input type="text" name="" id=""&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;input type="radio" name="gender" id="female"&gt;
        &lt;label for="female"&gt;Female&lt;/label&gt;
        &lt;input type="radio" name="gender" id="male"&gt;
        &lt;label for="male"&gt;Male&lt;/label&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p></body>
<code>
</code>javascript
angular.module('Demo', [])</p>

<pre><code>.controller('DemoController', ['$scope',
    function ($scope) {}
])
.directive('tellMe', [
    function () {
        return {
            link: function (scope, element, attr) {
                element.bind('click', function () {
                    var target = angular.element(event.target);
                    if (!target.is(':text')) {
                        return false;
                    } else {
                        console.log('input field clicked');
                    }
                });
            }
        };
    }
]);
</code></pre>

<p><code>``
Check the [demo](http://jsbin.com/alovifeJ/4/edit?output), you'll see the radion button group is not functional well, one of them can never be checked, this is all because we use</code>return false` in directive.</p>

<p>After we replace <code>return false</code> with <code>return</code>, everything back to normal, check again <a href="http://jsbin.com/alovifeJ/5/edit?output">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Traps in Angular Directive -- Isolated Scope]]></title>
    <link href="http://fedcuit.github.com/blog/2014/01/10/traps-in-directive/"/>
    <updated>2014-01-10T10:10:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2014/01/10/traps-in-directive</id>
    <content type="html"><![CDATA[<p>I was trapped in angular directive this work, after struggled for hours, I noticed below traps in angular directive.</p>

<h2>Directive with isolated scope will impact native angular directive</h2>

<p>If your own directive has a isolated scope,  then it will impact native angular directive, which means, sometime, ngModel, ngDisabled suddenly doesn't work, because they're impacted by your directive.
take below as an example:</p>

<p>We have a input field to type in a programming language, click the 'Add' button will add it into a list(as it's a simple demo, so data validation is not concerned)</p>

<p>```html
<body ng-app="DemoApp"></p>

<pre><code>&lt;div ng-controller="DemoController"&gt;
    What's your favorite programming language (up to five):
    &lt;input type="search" ng-model="profile.newLanguage" /&gt;
    &lt;input type="button" 
        value="Add" 
        add-language 
        languages="profile.languages" 
        new-language="profile.newLanguage" /&gt;
    &lt;div&gt;
        &lt;ul&gt;
            &lt;li ng-repeat="language in profile.languages"&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p></body>
```</p>

<p>```javascript
angular.module('DemoApp', [])</p>

<pre><code>.controller('DemoController', ["$scope",
    function ($scope) {
        $scope.profile = {};
        $scope.profile.languages = [];
    }
])
.directive('addLanguage', [
    function () {
        return {
            scope: {
                languages: '=',
                newLanguage: '='
            },
            link: function (scope, ele, attr) {
                ele.on('click', function () {
                    scope.languages.push(scope.newLanguage);
                    scope.$apply();
                });
            }
        };
    }
]);
</code></pre>

<p>```</p>

<p>we put a directive <code>addLanuage</code> on the button, which will get the value in the input field and add it to language list, due to we need to operate the language list, so we use a isolated scope to access it inside the directive.</p>

<p>Try it yourself. <a href="http://jsbin.com/emivixEz/5/embed?output">demo</a></p>

<p>Now the new requirement comes, a user only allow to fill up to five programming languages, we need to disable the <code>Add</code> button after user have input 5 languages.</p>

<p>Seems a small change will fit the new requirement, ngDisabled should solve this.</p>

<p>```html
&lt;input</p>

<pre><code>type="button" 
value="Add" 
add-language 
ngDisabled="reachThreshold()" 
languages="profile.languages" 
new-language="profile.newLanguage" /&gt;
</code></pre>

<p>```</p>

<p>```javascript
angular.module('DemoApp', [])</p>

<pre><code>.controller('DemoController', ["$scope",
    function ($scope) {
        $scope.profile = {};
        $scope.profile.languages = [];
        $scope.reachThreshold = function () {
            return $scope.profile.languages.length === 5;
        };
    }
])
.directive('addLanguage', [
    function () {
        return {
            scope: {
                languages: '=',
                newLanguage: '='
            },
            link: function (scope, ele, attr) {
                ele.on('click', function () {
                    scope.languages.push(scope.newLanguage);
                    scope.$apply();
                });
            }
        };
    }
]);
</code></pre>

<p><code>``
Play with the updated code you'll find out</code>ngDisabled` is not working!
<a href="http://jsbin.com/itOTase/3/edit?output">demo</a></p>

<p>What can we do to save the <code>ngDisabled</code> damaged by isolated scope.
```html
<body ng-app="DemoApp"></p>

<pre><code>&lt;div ng-controller="DemoController"&gt;
    Programming language:
    &lt;input type="search" ng-model="profile.newLanguage" /&gt;
    &lt;input type="button" 
        value="Add" 
        add-language 
        needs-disabled="reachThreshold()" 
        ng-disabled="needsDisabled" 
        languages="profile.languages" 
        new-language="profile.newLanguage" /&gt;
    &lt;div&gt;
        &lt;ul&gt;
            &lt;li ng-repeat="language in profile.languages"&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p></body>
<code>
</code>javascript
angular.module('DemoApp', [])</p>

<pre><code>.controller('DemoController', ["$scope",
    function ($scope) {
        $scope.profile = {};
        $scope.profile.languages = ['a', 'a', 'a', 'a', 'a'];
        $scope.reachThreshold = function () {
            return $scope.profile.languages.length === 5;
        };
    }
])
.directive('addLanguage', [
    function () {
        return {
            scope: {
                languages: '=',
                newLanguage: '=',
                needsDisabled: '='
            },
            link: function (scope, ele, attr) {
                ele.on('click', function () {
                    scope.languages.push(scope.newLanguage);
                    scope.$apply();
                });
            }
        };
    }
]);
</code></pre>

<p><code>``
Now</code>ngDisabled` works, <a href="http://jsbin.com/ONiFagE/2/edit?html,js,output">demo</a></p>

<p>As you can see from the code, we declare a new attribute <code>needs-disabled</code> which use <code>reachThreshold()</code> as it's value, then we set <code>needsDisabled</code> to <code>ng-disabled</code>, the last thing is to declare the new attribute in directive's scope, in this way, <code>ngDisabled</code> back again.</p>

<h2>NO Multiple isolated scope</h2>

<p>If you put more than one directive on a element, and each of them has a isolated scope, angular will fail and complain multiple isolated scope on one element.</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | Feng erdong's Blog]]></title>
  <link href="http://fedcuit.github.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://fedcuit.github.com/"/>
  <updated>2012-10-27T20:18:57+08:00</updated>
  <id>http://fedcuit.github.com/</id>
  <author>
    <name><![CDATA[Feng erdong]]></name>
    <email><![CDATA[fedcuit@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[实用git命令]]></title>
    <link href="http://fedcuit.github.com/blog/2012/10/14/useful-git-commands/"/>
    <updated>2012-10-14T18:02:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2012/10/14/useful-git-commands</id>
    <content type="html"><![CDATA[<ul>
<li><p><code>git reflog</code><br/>
  Reflog is a mechanism to record when the tip of branches are updated. This command is to manage the information recorded in it.</p>

<p>  应用场景:</p>

<ol>
<li>当前的working directory的git log如下图所示:
 <img src="/images/2012-10-14-useful-git-commands/before-reset.jpg" alt="git status" /></li>
<li>用户切换到commit 041f088去查看几天之前系统的某个功能，执行:
 <code>git reset --hard 041f088</code></li>
<li>当前的working directory的git log如下图所示:
 <img src="/images/2012-10-14-useful-git-commands/after-reset.jpg" alt="git status" /></li>
<li>如果想切换回最新代码, 却发现已经不知道之前的HEAD的commit hash, 此时就可以使用<code>git reflog</code>命令来查看当前分支上的所有操作记录, 从中找到最新代码对应的commit hash:
 <img src="/images/2012-10-14-useful-git-commands/reflog.jpg" alt="git status" />
 从<code>git reflog</code>显示的操作记录来看，我们是从commit 4a56876 执行reset操作的，所以之前的HEAD是 4a56876, 执行<code>git reset --hard 4a56876</code>就可以切换回之前的代码.</li>
</ol>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Visual Reference Notes]]></title>
    <link href="http://fedcuit.github.com/blog/2012/08/11/notes-of-visual-git-reference/"/>
    <updated>2012-08-11T00:59:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2012/08/11/notes-of-visual-git-reference</id>
    <content type="html"><![CDATA[<p>This notes is written after reading <a href="http://marklodato.github.com/visual-git-guide/index-en.html">A Visual Git Reference</a></p>

<ul>
<li><p><strong>git add</strong> <em>copy file from working directory to INDEX/stage</em></p></li>
<li><p><strong>git commit</strong> <em>save a snapshot of files in INDEX/stage to repo</em></p>

<ul>
<li><code>git commit -a</code><br/>
(first git add all filenames that existed in the latest commit, and then running git commit) when we only modified some file after last commit, then we can directly use <code>git commit -a</code> to skip the git add step.</li>
</ul>
</li>
<li><p><strong>git checkout</strong> <em>copy from commit history(local repo) to INDEX and working directory</em></p>

<ul>
<li><code>git checkout HEAD files</code> <br/>
copies files from the latest commit to both the stage and the working directory.</li>
<li><code>git checkout local_branch</code><br/>
if files are not passed, then copy all files from that commit point to both INDEX and working directory, and remove files not in that commit.</li>
<li><code>git checkout tag/remote_branch/commit-hash/relative-commit files</code> <br/>
copy files from specified commit to INDEX and working directory, if commit-hash is not passed, then copy files from INDEX to working directory.</li>
<li><code>git checkout tag/remote_branch/commit-hash/relative-commit</code>
<strong>IF</strong>

<ol>
<li>files are not passed</li>
<li>not checkout from a local branch  <br/>
<strong>THEN</strong> an anonymous branch is created call detached HEAD, afterward commit will be base on detached HEAD, if switch to another branch, all commit in detached HEAD will be lost, if commits want be stored, it's better to use 'git checkout -b new_branch_name' to create a branch rather than use the anonymous branch.</li>
</ol>
</li>
</ul>
</li>
<li><p><strong>git reset</strong> <em>Move current branch to another position, and update INDEX/Move HEAD and update INDEX</em></p>

<ul>
<li><code>git reset commit-hash</code>
move current branch(HEAD) to specified position, and update stage to match the commit-hash. if --hard is given, also update working directory. if --soft is given, neither is updated.</li>
<li><code>git reset</code>
no commit-hash given, default to HEAD, move to HEAD, means, branch is not moved, but stage is updated with last commit.</li>
<li><code>git reset [commit-hash] files</code>
move to specified commit-hash and update files in INDEX to match that commit. If commit-hash it not given, it defaults to HEAD.</li>
</ul>
</li>
<li><p><strong>git merge</strong></p>

<ul>
<li><code>git merge other_commit</code>
if other commit is ancestor of current commit, do nothing. if current commit is ancestor of other commit, results in a fast-forward merge. if current commit and other commit are not on the same line, then a real merge occur, git find out the common ancestor of the two commits, do merge with the three part, saving the result to both index and working directory, if no conflict, then do a new commit.</li>
</ul>
</li>
<li><p><strong>git cherry-pick</strong></p>

<ul>
<li><code>git cherry-pick commit-on-other-branch</code>
copy a commit, creating a new commit on the current branch with the same message and patch as another commit.</li>
</ul>
</li>
<li><p><strong>git rebase</strong> <em>replay commit on the current branch to target branch, it just like a series of git cherry-pick call</em></p>

<ul>
<li><code>git rebase target_branch</code>
git merge will generate a new commit with two parents, but after git rebase, the last new commit only have one parent, and all old commits will be deleted.</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>

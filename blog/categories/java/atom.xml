<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | Feng erdong's Blog]]></title>
  <link href="http://fedcuit.github.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://fedcuit.github.com/"/>
  <updated>2013-07-07T19:53:02+08:00</updated>
  <id>http://fedcuit.github.com/</id>
  <author>
    <name><![CDATA[Feng erdong]]></name>
    <email><![CDATA[fedcuit@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing Using Gradle]]></title>
    <link href="http://fedcuit.github.com/blog/2013/07/07/testing-using-gradle/"/>
    <updated>2013-07-07T19:29:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2013/07/07/testing-using-gradle</id>
    <content type="html"><![CDATA[<ul>
<li>Run a single unit test</li>
</ul>


<p><code>groovy
gradle -Dtest.single=TestClassName test
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mockito Advanced Usage]]></title>
    <link href="http://fedcuit.github.com/blog/2013/06/17/mockito-intruduce/"/>
    <updated>2013-06-17T22:32:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2013/06/17/mockito-intruduce</id>
    <content type="html"><![CDATA[<ul>
<li>Inject dependency in Mockito</li>
</ul>


<p>```java
public class InjectMocksTest {</p>

<p>  @Mock
  private EJBBeanInjectedByContainerInRealCode dependencyBean;
  //Create a mock object with type EJBBeanInjectedByContainerInRealCode and inject it to a spy object.
  //Mockito will try to inject this dependency to target object in this order: Constructor, Property, Field.</p>

<p>  @InjectMocks
  @Spy
  private MyEJBBean ejbBean;
  //Create a spy object of MyEJBBean, all fields annotated with @Mock with injected into this spy object.</p>

<p>  @Before
  public void setUp() {</p>

<pre><code>initMocks(this);
//This is required to create all the mock objects and spy objects declared in annotation way.
</code></pre>

<p>  }</p>

<p>  @Test
  public void testShouldXXX() throws Exception {</p>

<pre><code>when(dependencyBean.findSomeDataFromDB(anyString(), anyString(), anyString())).thenReturn(anyList());
//Mock the behavior the the injected dependency.

Object[] objects = ejbBean.myMethod();
//Call the real method on the spy object.

assertThat(objects).isNotEmpty();
</code></pre>

<p>  }
}
```</p>

<ul>
<li>Verify method called with expected arguments
````java
ArgumentCaptor<String> argument = ArgumentCaptor.forClass(String.class);
verify(errors, atLeastOnce()).add(argument.capture(), any(ActionMessage.class));
//Verify errors.add(<em>, </em>) called with expected arguements, mockito will store captured arguemnt into the ArgumentCaptor object.</li>
</ul>


<p>List<String> values = argument.getAllValues();
//If method called only once, use getValue() to get the value passed in, if caleed multi times, use getAllVales() to get value list.</p>

<p>assertTrue(values.contains("exception.message"));
assertTrue(values.contains("exception.detail"));
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cucumber JVM]]></title>
    <link href="http://fedcuit.github.com/blog/2013/06/01/cucumber-jvm/"/>
    <updated>2013-06-01T18:59:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2013/06/01/cucumber-jvm</id>
    <content type="html"><![CDATA[<h2>Cucumber-JVM command line interface</h2>

<p>Usage: java cucumber.api.cli.Main [options] [ [FILE|DIR][:LINE[:LINE]*] ]+</p>

<p>Options:</p>

<ul>
<li><code>-g</code>, --glue PATH                    Where glue code (step definitions and hooks) is loaded from.</li>
<li><code>-f</code>, --format FORMAT[:PATH_OR_URL]  How to format results. Goes to STDOUT unless PATH_OR_URL is specified.
 Available formats: junit, html, pretty, progress, json, json-pretty.</li>
<li><code>-t</code>, --tags TAG_EXPRESSION          Only run scenarios tagged with tags matching TAG_EXPRESSION.</li>
<li><code>-n,</code> --name REGEXP                  Only run scenarios whose names match REGEXP.</li>
<li><code>-d</code>, --[no-]-dry-run                Skip execution of glue code.</li>
<li><code>-m</code>, --[no-]-monochrome             Don't colour terminal output.</li>
<li><code>-s</code>, --[no-]-strict                 Treat undefined and pending steps as errors.</li>
<li><code>--dotcucumber</code> PATH_OR_URL      Where to write out runtime information. PATH_OR_URL can be a file system
  path or a URL.</li>
<li><code>-v</code>, --version                      Print version.</li>
<li><code>-h</code>, --help                         You're looking at it.</li>
</ul>


<h2>IDE support</h2>

<p>Be able to run *.feature files directly without any configuration in IntelliJ, you should put feature files as the same package structure as glue code.</p>

<p>Like:</p>

<p>--src
  --test</p>

<pre><code>--java
  --com
    --cukes
      --XXXStepdefs.java
      --YYYStepdefs.java
--resources
  --com
    --cukes
      --features
        --XXX.feature
        --YYY.feature
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Useful gradle configuration]]></title>
    <link href="http://fedcuit.github.com/blog/2013/05/31/useful-gradle-config/"/>
    <updated>2013-05-31T21:56:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2013/05/31/useful-gradle-config</id>
    <content type="html"><![CDATA[<h1>Basic configuration</h1>

<ul>
<li>Must have: <code>java plugin</code>, <code>maven repo</code>, <code>dependencies</code>
```groovy
apply plugin: 'java'</li>
</ul>


<p>repositories {</p>

<pre><code>mavenCentral()
</code></pre>

<p>}</p>

<p>dependencies {
  testCompile 'info.cukes:cucumber-java:1.1.3'\</p>

<pre><code>, 'info.cukes:cucumber-junit:1.1.3'\
, 'junit:junit:4.11'\
, 'org.seleniumhq.selenium:selenium-java:2.32.0'\
, 'org.easytesting:fest-assert:1.4'
</code></pre>

<p>}</p>

<p>```</p>

<ul>
<li>Enable to run cucumber (with selenium)
```groovy
configurations {
cucumberRuntime {
  extendsFrom testRuntime
}
}</li>
</ul>


<p>task cucumber() {
  dependsOn assemble, compileTestJava</p>

<pre><code>doLast {
  javaexec {
    main = "cucumber.api.cli.Main"
      jvmArgs = ["-Dwebdriver.chrome.driver=/Users/edfeng/Downloads/chromedriver"]
      //Must set if you want to use chrome webdriver
      classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
      args = ["-g", "gradle.cucumber", "src/test/resources"]
      // 1. must set package name of glue code(where steps are defined). 2. must set directory of feature files.
  }
}
</code></pre>

<p>}</p>

<p>```</p>

<h1>Advanced configuration</h1>

<ul>
<li>Create gradle based project from template</li>
</ul>


<p>Simply add the following to your <code>~/.gradle/init.gradle</code> script:</p>

<p>```groovy
  gradle.beforeProject { prj -></p>

<pre><code>prj.apply from: 'http://www.tellurianring.com/projects/gradle-plugins/gradle-templates/apply.groovy'
</code></pre>

<p>  }
```</p>

<p>Type <code>gradle tasks</code> in any place where you want to create a gradle project, choose one from <code>Template Tasks</code>.</p>

<ul>
<li>Show dependencies <code>gradle dependencies</code></li>
<li>Specify source and test folders.
```groovy
sourceSets {
main {
  java {

<pre><code>srcDir 'mysubfolder/src/main/java'
</code></pre>

  }
  resources {

<pre><code>srcDir 'mysubfolder/src/main/resources'
</code></pre>

  }
}
test {
  java {

<pre><code>srcDir 'mysubfolder/src/test/java'
</code></pre>

  }
  resources {

<pre><code>srcDir 'mysubfolder/src/test/resources'
</code></pre>

<p>  }
}
}
```</p></li>
<li><p>Configue dependencies using local jar files
<code>groovy
dependencies {
compile fileTree (dir: 'file:/home/edfeng/somedir', includes: ['*.jar'])
testCompile fileTree (dir: 'file:../../somedir', includes: ['ViewController.jar'])
}
</code></p></li>
<li><p>Show all rumtime dependencies(This can also print out local libaries)
```groovy
task printAllDependencies() {</p>

<pre><code>configurations.runtime.each { File f -&gt; println f }
</code></pre>

<p>}
```</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[查看Jar包内容]]></title>
    <link href="http://fedcuit.github.com/blog/2013/01/31/show-content-of-jar-file/"/>
    <updated>2013-01-31T22:28:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2013/01/31/show-content-of-jar-file</id>
    <content type="html"><![CDATA[<p>已经有快一年没有写过Java代码了，这段时间看Gradle, 发现Java社区还是发展挺快的( 亦或是我已经out很久了 ^_^ ), 以前的打包工作都是Ant或是Maven来完成的，如果接触过Django或是Rails的人看到Ant跟Maven里的那一大堆配置，一定都快吐了，现在好了，基于Groovy的Gradle的代码让这一切变得不再那么麻烦，只需使用<code>gradle build</code>就可以生成jar包了.</p>

<p>不知道什么原因，我在使用生成的jar文件时总是提示类找不到，感觉应该是生成的jar文件有问题，Google了查看jar文件内容的命令, 在这里分享一下:
<code>bash
jar tvf filename.jar
</code></p>

<table>
<thead>
<tr>
<th> Option    </th>
<th>  Description</th>
</tr>
</thead>
<tbody>
<tr>
<td> t         </td>
<td> Lists the table of contents from jarfile </td>
</tr>
<tr>
<td> v         </td>
<td> Generates verbose output to standard output </td>
</tr>
<tr>
<td> f         </td>
<td> Specifies the file jarfile  </td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
</feed>

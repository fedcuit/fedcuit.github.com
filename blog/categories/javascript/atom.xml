<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Feng erdong's Blog]]></title>
  <link href="http://fedcuit.github.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://fedcuit.github.com/"/>
  <updated>2015-06-12T18:28:22+08:00</updated>
  <id>http://fedcuit.github.com/</id>
  <author>
    <name><![CDATA[Feng erdong]]></name>
    <email><![CDATA[fedcuit@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[为什么你的Angular代码很难测试]]></title>
    <link href="http://fedcuit.github.com/blog/2015/06/11/angular-unit-test/"/>
    <updated>2015-06-11T15:56:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2015/06/11/angular-unit-test</id>
    <content type="html"><![CDATA[<p>Angular推出有好几年的时候了, 跟其他的MV*框架相比, 它的<code>双向绑定</code>, <code>无须显式声明Model</code>, <code>模块管理</code>, <code>依赖注入</code>等特点都给Web应用开发带来了极大的便利, 另外, 借助于它众多强大的原生<code>directive</code>, 我们几乎可以避免麻烦的DOM操作了, 除了这些, Angular还有一个很大的亮点, 那就是高度的可测试性.</p>

<p>今天的Web开发已经不同往日, 更多的交互与逻辑都需要在前端完成, 有时候, 前端的代码量甚至在后端之上. 怎么去保证如此多的前端逻辑不被破坏, 依赖于功能测试? 这显示不现实, 功能测试很耗时, 而且它的创建成本较高, 所以通常只用它来覆盖最基本的那部分逻辑, 另一方面, 功能测试是依赖于流程的, 如果你想验证购买页面上的某个前端逻辑, 那么你就不得不一路从产品详情页面老老实实点过来, 反馈时间太长了, 可能你要等一分多钟才知道某个功能出错了, 我们自然不想把宝贵的开发时间浪费在等待上.</p>

<p>我在过去一段比较长的时候里都在项目上使用Angular, 在感受到Angular带来的便利的同时, 也饱受了Angular测试的折磨, 因为我一直觉得Angular的单元测试很难写, 跟JUnit + Mockito比起来, Angular代码的单元测试真是感觉写起来不得心应手, 更别说用TDD的方式来驱动开发.</p>

<p>我一直在思考为什么Angular社区说Angular的测试性很高, 但是在项目上实现用起来却是另一番境地. 经过分析项目上的代码, 我觉得要想驱动测试开发Angular代码, 那么其实是对你的Angular代码提出了比较高的要求, 你要遵循Angular的风格来开发你的应用, 只有你了解了其中的思想, 你的测试写起来才会轻松.</p>

<p>如果你已经使用Angular有一段时间了, 但是还没有读过这篇文章, 那么我强烈推荐你去读一下: <a href="http://stackoverflow.com/questions/14994391/thinking-in-angularjs-if-i-have-a-jquery-background">Thinking in Angular</a>.</p>

<p>先来看一看怎么样的Angular代码才是苗正根红的Angular代码.</p>

<ul>
<li><p><strong>避免使用任何的DOM操作</strong></p>

<p>  像DOM操作这样的脏活累活都应该交给Angular的原生<code>directive</code>去做, 我们的Angular代码应该只处理与DOM无关的业务逻辑. 来看一个简单的例子, 我们想创建一个简单的邮箱地址验证的directive, 它要实现的功能是, 当焦点从邮箱地址输入框移出的时候, 对输入框中的邮箱地址进行验证, 如果验证失败, 则向输入框添加一个样式表示输入的地址不合法, 比较糟糕的实现可能是这样的</p></li>
</ul>


<p><code>html
&lt;label for="email"&gt;Your email:&lt;/label&gt;
&lt;input id="email" type="text" ng-model="email" validate-on-blur/&gt;
</code></p>

<p>```javascript
angular.module("TheNG", [])</p>

<pre><code>    .directive("validateOnBlur", function () {
        return {
            link: function (scope, element, attrs) {
                var validate = function (email) {
                    return email.indexOf('@gmail.com') !== -1;
                };

                element.on('blur', function () {
                    if (!validate(scope.email)) {
                        element.addClass('error-box');
                    }
                });
            }
        };
    }
</code></pre>

<p>);
```</p>

<p>上面的代码应该可以满足我们的要求(验证逻辑因为不是我们关注的重点, 所以并不完善), 而且这个directive实现起来也挺简单的, 但是现在让我们一起来分析一下为什么我们认为这种写法是比较糟糕的.</p>

<p>最简单的办法就是在你的directive里面去找所有与DOM操作相关的代码.</p>

<p>首先看到的就是<code>on()</code>这个事件监听器. 完全没有必要自己去监听发生在被directive修饰的元素上的事件, angular有一整套的原生directive来干这个事情, 这里正确的做法应该是使用<code>ng-blur</code>来处理<code>blur</code>事件.</p>

<p>下一个有问题的地方就是<code>addClass()</code>, angular除了提供了事件监听相关的directive外, 也提供了操作元素本身属性的directive, <code>ng-class</code>就可以用来替换<code>addClass()</code>方法.</p>

<p>按照这个思路修改后的代码:
<code>html
&lt;label for="email"&gt;Your email:&lt;/label&gt;
&lt;input id="email" type="text" ng-model="email" ng-blur="validate()" ng-class="{'error-box': !isValid}" validate-on-blur/&gt;
</code></p>

<p>```javascript
angular.module("TheNG", [])</p>

<pre><code>.directive("validateOnBlur", function () {
    return {
        link: function (scope, element, attrs) {
            scope.isValid = true;
            scope.validate = function () {
                scope.isValid = scope.email.indexOf('@gmail.com') !== -1;
            };
        }
    };
}
</code></pre>

<p>);
```
比较一下这两个版本的实现, 是不是修改后的版本更简短, 更容易理解一些. 在新的版本里面, 我们只处理了业务逻辑, 即判断一个邮箱地址是否合法, 至于何时触发验证, 验证失败或成功之后应该有怎样的样式, 我们都统统交给了angular原生directive去处理了.</p>

<p>从测试的角度来看, 如果想给第一个版本的实现写单元测试, 那么要准备和验证的东西都很多, 我们需要设法去触发对应元素的<code>blur</code>事件, 然后再验证这个元素上是否添加了<code>error-box</code>这个class, 根据我的经验, 有时候为了验证这些DOM更新, 你还不得不创建真实的DOM结构添加到DOM tree上去, 又增加了一部分工作量.</p>

<p>而版本二就简单多了, 只定义了一个Model值<code>isValid</code>来标识当前的邮箱地址是否合法, <code>validate()</code>方法会在每次失焦之后自动执行, 要为它添加单元测试, 则只需要调用一下它的<code>validate()</code>方法, 然后验证<code>isValid</code>的值就可以了. SO EASY!~</p>

<ul>
<li><p><strong>将所有第三方服务封装成Service</strong></p>

<p>  一个Web项目中总是无法避免地要使用一些第三方的服务, 这里讨论的主要是前端的一些第三方服务, 比如在线客服, 站点统计等, 这些代码都在我们的控制之外, 大多数时候下都是从服务提供商的服务器上下载下来的, 而我们需要在业务代码中调用这些代码.
  如果我们每次都是赤裸裸地以全局变量的形式来使用这些服务, 那么造成的问题就是这样的代码很难测试, 因为这些代码是不存在于我们的代码库中的, 而且内容应该也是不定时更新的, 大多数情况很多人会因为这些原因放弃到对这类操作的测试.</p></li>
</ul>


<p>假设我们现在需要在某些动作发生之后调用一个第三方服务, 这个第三方服务叫做<code>serviceLoadedFromExternal</code>, 它提供了一个API叫做<code>makeServiceCall</code>, 如果直接使用这个API, 那么在测试中很难去验证这个服务被执行了(因为在单元测试环境中这个服务根本不存在), 但是如果我们将这个服务包装成一个angular service, 那么就可以在测试中轻易地将它替换成一个mock对象, 然后验证这个mock对象上的方法被调用了就可以了.</p>

<p>比较下面的两段代码:</p>

<ul>
<li><em>直接使用第三方服务</em><br/>
```javascript
angular.module("TheNG", [])
.controller("AController", function ($scope) {

<pre><code>$scope.someAction = function () {
    // handle some logic here
    serviceLoadedFromExternal.makeServiceCall();
};
</code></pre>

<p>});
```</p></li>
<li><p><em>使用封装成service的第三方服务</em>
```javascript
angular.module("TheNG", [])
.factory("wrappedService", function () {</p>

<pre><code>return {
    makeServiceCall: function () {
        serviceLoadedFromExternal.makeServiceCall();
    }
};
</code></pre>

})
.controller("AController", function ($scope, wrappedService) {

<pre><code>$scope.someAction = function () {
    // handle some logic here
    wrappedService.makeServiceCall();
};
</code></pre>

<p>});
```
Angular是高度模块化的, 它希望通过这种模块的形式来解决JS代码管理上的混乱, 并且使用依赖注入来自动装配, 这一点与Spring IOC很像, 带来的好处就是你的依赖是可以随意替换的, 这就极大的增加了代码的可测试性.</p></li>
<li><p><strong>尽量将Ajax请求放到service中去做</strong></p>

<p>  Angular中使用service来组织那些可被复用的逻辑, 除此之外, 我们也可以将service理解为是对应一个领域对象的操作的集合, 因此, 通常会将一组Ajax操作放在一个service中去统一管理.</p>

<p>  当然了,你也可以通过向你的directive或是controller中注入<code>$http</code>, 但是我个人不喜欢这种做法. 首先, <code>$http</code>是一个比较初级的依赖, 与其实注入的业务服务不是一个抽象层级, 如果在你的业务代码中直接操作http请求, 给人的一种感觉就像是在Spring MVC的request method中直接使用<code>HttpServeletRequest</code>一样, 有点突兀, 另外会让整个方法失衡, 因为这些操作的抽象层次是不一样的. 其次就是给测试带来的麻烦, 我们不得不使用<code>$httpBackend</code>来模拟一个HTTP请求的发送.</p>

<p>  我们应该设法让测试更简单,通过将Ajax请求封装到service中, 我们只需要让被mock的service返回我们期望的结果就可以了. 只有这样大家才会喜欢写测试, 甚至是做到测试驱动开发, 要去mock<code>$http</code>这样的东西, 显然是增加了测试的负担.</p></li>
<li><p><strong>使用Promise处理Ajax的返回值, 而不是传递回调函数</strong></p>

<p>  Angular中所有的Ajax请求默认都返回一个Promise对象, 不建议将处理Ajax返回值的逻辑通过回调函数的形式传递给发送http请求的service, 而应该是在调用service的地方利用返回的promise对象来决定如何处理.
  让我们通过下面的例子来感受一下:
```javascript
angular.module("TheNG", [])
  .service("deliveryService", function ($http) {</p>

<pre><code>  this.validateAddress = function (address, success, failure) {
      $http.post('/unknown', address).then(success, failure);
  };
</code></pre>

  })
  .controller("DeliveryController", function ($scope, deliveryService) {

<pre><code>  var acceptAddress = function () {
      console.log('address accepted');
  };
  var rejectAddress = function () {
      console.log('address rejected');
  };
  $scope.validateAddress = function () {
      deliveryService.validateAddress($scope.address, acceptAddress, rejectAddress);
  };
</code></pre>

<p>  });
```</p></li>
</ul>


<p>这里的处理办法是将快递地址验证失败或成功之后的处理函数都传给了<code>deliveryService</code>, 当验证结果从服务器端返回之后, 相应的处理函数会被执行. 这做写法其实是比较常见的, 但是问题出在哪里呢?</p>

<p>其实, 作为一个service的接口, <code>validateAddress</code>应该只接收一个待验证的地址, 验证完成之后返回一个验证结果就可以了, 本来应该是一个很干净的接口, 我们之所以丑陋把对应的处理函数也传进去, 原因就在于这是一个异步的请求, 所以需要在发请求的时候就将对处理函数<em><code>绑定</code></em>上去.</p>

<p>你应该已经猜到了第二个问题我会说一说对它的测试, 通常来说, 如果一个service创建成本较高或是存在外部依赖/请求的话, 我们会将这个service mock掉, 通过让mocked service直接返回我们想要的结果来让我们只关注被验证的业务逻辑.我们回头看一下上面的实现, 如果我们把<code>deliveryService</code>的<code>validateAddress()</code>方法mock掉, 那么我们根本没有办法去验证<code>acceptAddress()</code>和<code>rejectAddress()</code>里面的逻辑!</p>

<p>所以, 如果你的处理函数是传递给service中的API的话, 那么你的测试其实就已经跟这个API的实现绑定了, 你只有去创建一个真实的service并且让它发送HTTP请求, 你的处理函数才会被执行到.</p>

<p>经过这一番折腾, 你一定要说, 这测试比实现代码难写多了. 正确的打开方式应该是这样的: service的API只需要返回promise, 对应的处理函数的<em><code>绑定</code></em>在这个返回的promise上, 这样我们只需要mock那个service的接口让它返回一个我们期望的promise, 然后控制promise的结果让对应的处理函数被执行:
```javascript
angular.module("TheNG", [])</p>

<pre><code>.service("deliveryService", function ($http) {
    this.validateAddress = function (address) {
        return $http.post('/unknown', address);
    };
})
.controller("DeliveryController", function ($scope, deliveryService) {
    var acceptAddress = function () {
        console.log('address accepted');
    };
    var rejectAddress = function () {
        console.log('address rejected');
    };
    $scope.validateAddress = function () {
        deliveryService.validateAddress($scope.address).then(acceptAddress, rejectAddress);
    };
});
</code></pre>

<h2>```</h2>

<p>本来打算接下来介绍一下Angular代码的单元测试的各种模式的, 写着写着篇幅有点多了, 期待下一篇吧.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Call vs Apply vs Bind]]></title>
    <link href="http://fedcuit.github.com/blog/2015/06/10/bind-apply-call/"/>
    <updated>2015-06-10T11:29:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2015/06/10/bind-apply-call</id>
    <content type="html"><![CDATA[<p>在JavaScript中, 函数是一等公民, 可以作为参数传入另一个函数, 也可以作为返回值从另一个函数中返回, 不仅如此, 在JavaScript这门动态语言中, 函数可以被任意对象调用, 比如说<code>function1</code>是定义在<code>obj1</code>上的, 但是它还可以被<code>obj2</code>所调用, 怎么做到的? 有下面的三种办法:</p>

<ul>
<li><strong>Call</strong></li>
</ul>


<p>基本语法: <code>fnc.call(thisArg, arg1, arg2... argN)</code></p>

<ul>
<li><code>thisArg</code>将作为<code>this</code>对象传入到函数<code>fnc</code>中</li>
<li><code>arg1, arg2... argN</code>作为参数列表传入到函数中</li>
</ul>


<p>通过<code>call</code>方法可以让一个函数被任何的对象所使用, <code>call()</code>会立即返回使用<code>thisArg</code>作为<code>this</code>对象, 余下部分作为参数列表来调用原函数<code>fnc</code>的结果, 如:</p>

<p>```javascript
var person = {
  toString: function(delimiter) {</p>

<pre><code>return "height=" + this.height + delimiter + " weight=" + this.weight;
</code></pre>

<p>  }
};</p>

<p>person.height = "180";
person.weight = "80";</p>

<p>console.log(person.toString(","));
//"height=180, weight=80"</p>

<p>var dog = {};
dog.height = "40";
dog.weight = "30";</p>

<p>console.log(person.toString.call(dog, ":"));
//"height=40: weight=30"
```
* <strong>Apply</strong></p>

<p>上面的例子里<code>toString</code>只是返回了身高与体重的数值, 但是只有数值是没有意义的, 我们还需要单位, 出于演示的目的我们打算将单位传为参数传入<code>toString</code>方法, 修改后的代码如下:
```javascript
var person = {
  toString: function(delimiter, heightUnit, weightUnit) {</p>

<pre><code>return "height=" + this.height + heightUnit + delimiter + " weight=" + this.weight + weightUnit;
</code></pre>

<p>  }
};</p>

<p>person.height = "180";
person.weight = "80";</p>

<p>console.log(person.toString(",", "cm", "kg"));
//"height=180cm, weight=80kg"</p>

<p>var dog = {};
dog.height = "40";
dog.weight = "30";</p>

<p>console.log(person.toString.call(dog, ":", "cm", "kg"));
//"height=40cm: weight=30kg"
<code>
现在在调用`call`的时候需要传入三个参数(除去thisArg不算),  还不错, 不过接下来我们打算将更进一步, 我们希望在dog对象上添加一个方法`justDoIt`, 不管这个`justDoIt`接收什么参数, 都要将对`justDoIt`函数的调用代理到`toString`方法上去, 先试试看`call`能不能帮我们解决这个问题:
</code>javascript
var person = {
  toString: function(delimiter, heightUnit, weightUnit) {</p>

<pre><code>return "height=" + this.height + heightUnit + delimiter + " weight=" + this.weight + weightUnit;
</code></pre>

<p>  }
};</p>

<p>person.height = "180";
person.weight = "80";</p>

<p>console.log(person.toString(",", "cm", "kg"));
//"height=180cm, weight=80kg"</p>

<p>var dog = {
  justDoIt: function() {</p>

<pre><code>person.toString.call(this, arguments);
</code></pre>

<p>  }
};
dog.height = "40";
dog.weight = "30";</p>

<p>console.log(dog.justDoIt(":", "cm", "kg"));
//"height=40undefined[object Arguments] weight=30undefined"
<code>``
可以看到</code>arguments<code>这个数组被赋值给了第一个参数</code>delimiter<code>, 而</code>heightUnit<code>,</code>weightUnit<code>都没有被正确的赋值, 所以他们都是</code>undefined`.</p>

<p>要解决上面的问题, 就需要<code>apply</code>出场了, <code>apply</code>与<code>call</code>非常的相似, 唯一的区别就是<code>call</code>需要明确地为每一个参数传值, 而<code>apply</code>只需要一个参数数组就可以了, 当原函数被调用的时候, <code>apply</code>会将这个参数数组<code>unpack</code>并给对应位置上的参数赋值.
```javascript
var person = {
  toString: function(delimiter, heightUnit, weightUnit) {</p>

<pre><code>return "height=" + this.height + heightUnit + delimiter + " weight=" + this.weight + weightUnit;
</code></pre>

<p>  }
};</p>

<p>person.height = "180";
person.weight = "80";</p>

<p>console.log(person.toString(",", "cm", "kg"));
//"height=180cm, weight=80kg"</p>

<p>var dog = {
  justDoIt: function() {</p>

<pre><code>return person.toString.apply(this, arguments);
</code></pre>

<p>  }
};
dog.height = "40";
dog.weight = "30";</p>

<p>console.log(dog.justDoIt(":", "cm", "kg"));
//"height=40cm: weight=30kg"
```
* <strong>Bind</strong></p>

<p>如果你对函数式编程有所了解, 那么你应该知道<code>柯里化(currying function)</code>与<code>偏函数(partial function)</code>, 它们有个共同之处就是都是从一个函数上产生出的另一个新的函数.</p>

<p>偏函数可以视为是针对某种情况简化之后的函数, 比如说现在有一个函数<code>awesomeFunction(arg1, arg2, arg3)</code>, 而对这个函数的调用过程中, 第一个参数几乎都是相同的, 作为眼睛里容不得重复的程序员, 我们应该有一种办法可以消除这种重复, 这个时候偏函数就伴着掌声入场了, 我们在偏函数的声明中已经预置了第一个参数<code>arg1=mostFrequentlyUsedValue</code>, 这样我们调用偏参数的时候只需要传入<code>(arg2, arg3</code>)就可以了.</p>

<p>那么现在问题来了, JavaScript中怎么实现偏函数呢?</p>

<p>这时候就需要使用<code>bind</code>了, <code>bind</code>的基本语法与<code>call</code>一致:
<code>fnc.bind(thisArg, arg1, arg2... argN)</code></p>

<p>但是它们有一个重要的区别, 那就是<code>bind</code>不会立即执行原函数, 而是返回一个新的函数, 并且这个新的函数在被调用的时候会自动将已经<code>bind</code>上去的那些参数值赋给对应位置的上的参数, 新的函数只需要关心余下的那部分参数列表.
```javascript
function greet(timeFrame, msg) {
  return "Good " + timeFrame + ", " + msg;
}</p>

<p>console.log(greet("Morning", "What can I do for you?"));
console.log(greet("Morning", "This is your ticket"));
console.log(greet("Morning", "welcome back"));
console.log(greet("Morning", "How was the trip"));
console.log(greet("Afternoon", "Can I borrow you some time?"));
// "Good Morning, What can I do for you?"
// "Good Morning, This is your ticket"
// "Good Morning, welcome back"
// "Good Morning, How was the trip"
// "Good Afternoon, Can I borrow you some time?"
<code>
上面的例子中`greet`这个函数多数情况下都是使用"Morning"作为第一个参数, 何不创建一个更简短的函数来专门处理这种场景呢:
</code>javascript
function greet(timeFrame, msg) {
  return "Good " + timeFrame + ", " + msg;
}</p>

<p>var morningGreet = greet.bind(undefined, "Morning");</p>

<p>console.log(morningGreet("What can I do for you?"));
console.log(morningGreet("This is your ticket"));
console.log(morningGreet("welcome back"));
console.log(morningGreet("How was the trip"));
console.log(greet("Afternoon", "Can I borrow you some time?"));
```</p>

<p>了解了<code>bind</code>其实是返回一个新的函数之后, 那么其实想通过它来实现上面<code>call</code>/<code>apply</code>的功能其实就非常简单了, 只需要调用一下生成的新的函数就可以了.
```javascript
var person = {
  toString: function(delimiter) {</p>

<pre><code>return "height=" + this.height + delimiter + " weight=" + this.weight;
</code></pre>

<p>  }
};</p>

<p>person.height = "180";
person.weight = "80";</p>

<p>console.log(person.toString(","));
//"height=180, weight=80"</p>

<p>var dog = {};
dog.height = "40";
dog.weight = "30";</p>

<p>console.log(person.toString.bind(dog, ":")());
//"height=40: weight=30"</p>

<h2>```</h2>

<p>上面只是从函数可以被任意对象调用的角度来分析了<code>call</code>, <code>apply</code>, <code>bind</code>的用法, 其实实际使用的过程中, 这些方法还有另一个非常重要的用途, 那就是给回调函数绑定正确的上下文环境(this对象).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone体验 -- View篇]]></title>
    <link href="http://fedcuit.github.com/blog/2015/06/04/backbone-view/"/>
    <updated>2015-06-04T12:04:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2015/06/04/backbone-view</id>
    <content type="html"><![CDATA[<h2>View</h2>

<p>简单讲, <code>View</code>就是用来展示<code>Model</code>里面的数据的.</p>

<p>这样可以简单回顾一下我用过的一些前端JS框架是怎么处理数据展示的, 从最原始的jQuery开始:
只使用jQuery的时候, 当我们已经通过AJAX拿到数据之后, 我们可能需要先定位到需要显示数据的元素然后通过<code>el.val('...')</code>或者<code>el.text('...')</code>将数据手动设置上去. 当元素的值被更新之后需要将修改反应到后端时, 我们可能需要取到所有的元素的最新值然后发送到后台.</p>

<p>如上面那样通过操作对应的单个的DOM元素去设置值的方式写起来很繁琐, 如果返回的数据里面有十几甚至几十个条目的话, 写出来的代码更是毫无美感可言, 于是人们想到了使用JS<code>模板</code>, 通过一段通常是写在<code>&lt;head&gt;&lt;/head&gt;</code>中<code>&lt;script type="text/template" id="myTemplate"&gt;...&lt;/script&gt;</code>来表示最终要后面的HTML的结构, 在其中使用占位符来标识哪里部分需要被真正传入的数据替换. 模板定义好之后, 当拿到AJAX的返回结果时, 我们只需要将数据填充到这个模板, 然后将生成的HTML添加到页面中就可以了, 一句话就可以搞定, 比如 <code>$container.html(_.template($('#myTemplate'), ajaxReponseData))</code>. 比较常用的模板引擎有<code>mustache</code>, <code>underscore template</code></p>

<p>事情发展到这里还没完, 现在数据显示的问题解决的差不多了, 但是如果用户将某些DOM元素的值修改之后, 我们还需要将所有的元素的值读取一遍, 然后将这些值发送到后台去更新这条记录. 我们通过模板技术解决了繁琐的DOM设值, 但是数据的更新还是一个问题.</p>

<p>一起来看看Backbone的<code>View</code>是如何解决这个问题.</p>

<p>首先我们需要定义一个Backbone <code>View</code>, 定义的方法与<code>Model</code>非常的类似, 只需要继承'View`就可以了:
``` javascript
TodoItemView = Backbone.View.extend({</p>

<pre><code>template: _.template($("#todoItemTemplate").html()),
initialize: function () {
    this.render();
},
render: function () {
    return this.$el.html(this.template(this.model.attributes));
},
events: {
    "click .toggle": "handleToggle",
    "click .destroy": "handleDestroy"
},
handleToggle: function () {
    this.model.set('completed', this.$('.toggle').prop('checked'));
}
</code></pre>

<p>}
<code>``
与上面提到的方式不同, Backbone</code>View<code>实现了细粒度的数据更新, 通过对对应的组件进行事件监听, 当某个组件的值被修改时, 只需要将被修改的属性更新到</code>Model`中.</p>

<p>下面介绍一下<code>View</code>中比较重要的几个属性(钩子):</p>

<ul>
<li><p><code>initialize</code></p>

<p>  通常在这个属性对应的方法里面去生成最初的视图, 如上例中所求, 在<code>initialize</code>方法中将模板填充之后添加到<code>View</code>对应的HTML容器中.</p></li>
<li><p><code>el</code></p>

<p>  这个属性通常是一个<em>css selector</em>, 对应页面中这个<code>View</code>将被添加到HTML元素, 可以理解成是这个<code>View</code>的container, 个人理解是在创建Backbone <code>Collection</code>, <code>View</code>, <code>Model</code>的实例的时候, 都可以向其中传入一个对象, 这个对象的属性会与定义时的那些属性进行merge. 所以<code>el</code>既可以声明在<code>View</code>类的定义中, 也可以通过参加传入, 如 <code>var todoItemView = new TodoItemView({el: jQuery('.todoItem'});</code>
  在<code>View</code>内部使用的时候, 通常是通过<code>this.$el</code>来操作这个容器, <code>this.$el</code>将会引用你配置的<code>el</code>对应的jQuery对象.
  除了<code>el</code>之外, 还有一些其他的属性也是跟<code>View</code>的容器相关的:</p>

<ul>
<li><code>tagName</code></li>
<li><code>className</code></li>
</ul>


<p>  如果没有配置<code>View</code>的<code>el</code>属性, 那么默认将使用一个<code>DIV</code>来包装<code>View</code>的内容, 这时候如果配置了<code>tagName</code>, 那么就会使用<code>&lt;tagName&gt;&lt;/tagName&gt;</code>来包装, 如果还有<code>className</code>的话, 那就变成了<code>&lt;tagName class="valueOfClassNameProp"&gt;&lt;/tagName&gt;</code></p></li>
<li><p><code>this.$('css selector')</code></p>

<p>  一开始我也比较疑惑<code>this.$()</code>与<code>$()</code>有什么区别, 看了源码之后才发现原来<code>this.$()</code>是在当时<code>View</code>的范围内查找元素, 是个挺实用的方法.
<code>javascript
$: function(selector) {
return this.$el.find(selector);
},
</code></p></li>
<li><p><code>events</code></p>

<p>  这个属性应该是<code>View</code>所特有的, 它里面定义了一组元素上可能发生的事件以及对应的处理方法, 如:
<code>javascript
events: {
  "click .toggle": "handleToggle",
  "click .destroy": "handleDestroy"
},
handleToggle: function () {
  this.model.set('completed', this.$('.toggle').prop('checked'));
}
</code>
 如在<code>.toggle</code>元素上点击时会执行<code>handleToggle</code>方法. 这种事件监听方式其实与<code>jQuery.on()</code>非常的类似:</p>

<ul>
<li><code>jQuery.on(eventType, selector, handler)</code></li>
<li><code>"eventType selector": "handler"</code></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone体验 -- Model篇]]></title>
    <link href="http://fedcuit.github.com/blog/2015/06/04/backbone-model/"/>
    <updated>2015-06-04T08:52:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2015/06/04/backbone-model</id>
    <content type="html"><![CDATA[<h2>Model</h2>

<p>在<code>Backbone</code>的理念中, 一个<code>Model</code>应该算是存在于客户端的与服器端<code>resource</code>/<code>entity</code>对应的一个JS对象, 定义一个<code>Model</code>很简单:
``` javascript
TodoItem = Backbone.Model.extend({</p>

<pre><code>defaults: {
    title: '',
    completed: false
},
validate: function (attributes) {
  // validation goes here
}
</code></pre>

<p>})
<code>``
创建一个</code>Model<code>的实例就是创建一个对象</code>var todoItem = new TodoItem()<code>, 下面对定义在</code>Model<code>中的常用属性做一下说明(_这些属性其实是一些钩子,</code>Backbone`希望我们去重写这些属性_)</p>

<ul>
<li><p><code>defaults</code></p>

<p>通过这个属性来指定<code>Model</code>的默认值</p>

<p>当创建Model实例的时候没有传入对象来初始化, 那么这个实例的属性就与<code>defaults</code>指定的属性值是一致的, 如:
<code>javascript
var todoItem = new TodoItem();
console.log(JSON.stringify(todoItem.toJSON()));
// {"title":"","completed":false}
</code>
当创建Model实例时传入了对象, 那么这个对象会跟<code>defaults</code>进行merge
<code>javascript
var todoItem = new TodoItem({"newAttr": "valueOfNewAttr", "title": "Build a time machine"});
console.log(JSON.stringify(todoItem.toJSON()));
// {"newAttr":"valueOfNewAttr","title":"Build a time machine","completed":false}
</code></p></li>
<li><p><code>validate</code></p>

<p> 将对<code>Model</code>的验证逻辑放在这个属性对应的方法中, 一般情况下, 我们不会直接调用这个<code>validate</code>方法, 它扮演的角色有点像<code>实现</code>定义在父类中的<code>抽象方法</code>, 这个方法会在<code>Model</code>的其他方法中被用到, 比如以下的这些方法:</p>

<p> <code>isValid()</code></p>

<p> 我们可以调用<code>Model</code>上的<code>isValid()</code>方法来判断这个<code>Model</code>上的属性值满足验证条件</p></li>
</ul>


<p>```javascript
TodoItem = Backbone.Model.extend({
defaults: {</p>

<pre><code>title: '',
completed: false
</code></pre>

<p>},
validate: function (attributes, options) {</p>

<pre><code>if (attributes.title.indexOf("&lt;") != -1) {
    return "html tag is now allowed is title"
}
</code></pre>

<p>}
});
var todoItem = new TodoItem({</p>

<pre><code>"title": "&lt;script&gt;...&lt;/script&gt;"
</code></pre>

<p>});
console.log(todoItem.isValid());
// false
<code>``
  </code>save()<code>or</code>set()`</p>

<p>   默认情况下调用<code>Model</code>的<code>save()</code>方法会触发<code>validate()</code>, 可以通过在<code>save()</code>的时候使用option <code>{validate: false}</code>来跳过验证. 类似的, 也可以在<code>set()</code>时通过option <code>{validate: true}</code>来触发验证.</p>

<p>   <code>validate()</code>方法的返回值比较有趣, 如果验证通过了, 则什么都不用返回, 如果验证失败了, 则需要返回点什么(字符中或是对象都可以).</p>

<p>   <code>validate()</code>方法验证失败之后有两件事件会发生:</p>

<ul>
<li> 将<code>validate()</code>返回的结果添加到<code>Model</code>中, 可以通过<code>model.validationError</code>来访问</li>
<li> 在<code>Model</code>上触发<code>invalid</code>事件, 并像model和error绑定对回调函数上</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Directive - Call controller method in default scope]]></title>
    <link href="http://fedcuit.github.com/blog/2014/06/27/test-directive-call-controller-method-in-default-scope/"/>
    <updated>2014-06-27T14:17:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2014/06/27/test-directive-call-controller-method-in-default-scope</id>
    <content type="html"><![CDATA[<h2>Call controller method in default scope</h2>

<p>```html</p>

<div ng-controller="FruitController" ng-init="init()">
    <h4>Call controller method in default scope</h4>
    <label>What's your favorite fruit(name can only contains letter)</label>
    <input type="text" ng-model="newFruit"/>
    <button type="button" add-fruit-method>validate and add</button>
    <ul>
        <li ng-repeat="fruit in fruits track by $index"></li>
    </ul>
</div>


<p><code>
This time, we want to validate the fruit name use typed in first, if it only contains letter, then it's eligible to add in, otherwise nothing happen. The validation logic is defined in controller, we need to test the validation method is called inside our directive.
</code>javascript
describe('directives', function () {</p>

<pre><code>beforeEach(module('myApp.directives'));

describe('addFruitMethod', function () {
    var $scope, element;
    beforeEach(inject(function ($rootScope, $compile) {
        $scope = $rootScope;
        $scope.fruits = [];
        $scope.newFruit = 'apple';
        $scope.isValid = angular.noop;

        element = angular.element('&lt;input type="text" name="fruit" id="fruitDefault" ng-model="newFruit"/&gt;&lt;button type="button" add-fruit-method&gt;validate and add&lt;/button&gt;');
        $compile(element)($scope);
    }));

    it('should add valid fruit to fruit list when click button', function () {
        var isValid = spyOn($scope, 'isValid').andReturn(true);

        element.filter('button').trigger('click');

        expect(isValid).toHaveBeenCalled();
        expect($scope.fruits[0]).toBe('apple');

    });

    it('should reject invalid fruit when click button', function () {
        var isValid = spyOn($scope, 'isValid').andReturn(false);

        element.filter('button').trigger('click');

        expect(isValid).toHaveBeenCalled();
        expect($scope.fruits.length).toBe(0);
    });
});
</code></pre>

<p>});
```
It's very similar with testing manipulate data on default scope, the only thing different is we spy on the validation method to verify it has been called, also we let the spy object return the corresponding result to execute each branch.</p>
]]></content>
  </entry>
  
</feed>

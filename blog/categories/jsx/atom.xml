<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jsx | Feng erdong's Blog]]></title>
  <link href="http://fedcuit.github.com/blog/categories/jsx/atom.xml" rel="self"/>
  <link href="http://fedcuit.github.com/"/>
  <updated>2015-07-23T23:16:20+08:00</updated>
  <id>http://fedcuit.github.com/</id>
  <author>
    <name><![CDATA[Feng erdong]]></name>
    <email><![CDATA[fedcuit@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JSX里的那些个坑]]></title>
    <link href="http://fedcuit.github.com/blog/2015/07/23/jsx-gotchas/"/>
    <updated>2015-07-23T21:52:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2015/07/23/jsx-gotchas</id>
    <content type="html"><![CDATA[<p>最近在项目上使用<code>Backbone</code> + <code>React</code>作为前端框架, Backbone主要是用来作为<code>Model</code>来与后台的Restful API进行交互, React则负责<code>View</code>, 也算是发挥了各自的优势: Backbone的Model和Collection只需要指定对应Resource的url, 就可以直接读取/更新/删除记录, 而不需要手动去发送对应的AJAX请求, 另外借助于寄生在Model/Collection上的<code>underscore</code>方法, 操作数据也很方便; React接收Backbone的Model/Collection作为<code>state</code>或<code>props</code>, 通过<code>Virtual DOM</code>来高效的DOM更新, 与其他的View技术相比较, React功能更单一, 概念更少更易理解, 而且有更高的性能. 这一切看下来都是那么的美好, 但是使用React还是在它的代价的, 代价就是<code>JSX</code>.</p>

<p>简单讲, <code>JSX</code>也就是一段写在JavaScript中的XML, 它是由React提供的一种更简洁的生成Virtual DOM的方法, 通过使用<code>JSX</code>我们可以像书写<code>HTML</code>一样来编写React Component, 然后再使用对应的编译器将<code>JSX</code>定义的Component Tree<em>翻译</em>成不易读的<code>React.createElement(...)</code> (Virtual DOM就是由<code>React.createElemnt()</code>创建出来的)</p>

<p>正是因为<code>JSX</code>代码会最终被翻译成对应的Javascript代码, 所以在书写<code>JSX</code>代码的时候, 虽然我们说他的形式像是<code>HTML</code>一样, 但是我们并不能完全遵照HTML规范来书写, 在<code>JSX</code>中使用HTML的属性还是有一些限制(坑)的:</p>

<h2>避免出现Javascript关键字</h2>

<p>因为<code>JSX</code>会被编译成JS代码供浏览器执行, 所以如果在<code>JSX</code>中使用了Javascript的关键字的话, 那么很可能导致生成的代码无法被正确解释.(在IE上这个问题格外严重, 但在强大的Chrome上, 这种情况可以被很智能地处理).</p>

<p>一看下面的例子就明白了:</p>

<p>这段<code>JSX</code>代码生成一个表单, 其中有一个Label和对应的Input用来输入用户的名字,</p>

<p><code>html
&lt;form&gt;
   &lt;label for="name"&gt;Your name:&lt;/label&gt;
   &lt;input type="text"/&gt;
&lt;/form&gt;
</code></p>

<p>根据它编译生成的Javascript代码长这个样子:</p>

<p>```javascript
React.createElement("form", null,</p>

<pre><code>React.createElement("label", {
    for: "name"
}, "Your name:"),
React.createElement("input", {
    type: "text"
})
</code></pre>

<p>);
```</p>

<p>通过比较我们基本上可以总结出这个<em>翻译</em>的过程, 对于一个<code>JSX Tag</code>:
<code>html
&lt;tagName attr1=val1 attr2=val2&gt;
  [childrenComponents]
&lt;/tagName&gt;
</code>
它生成的Javascript应该是:
<code>javascript
React.createElement("tagName", {attr1: val1, attr2: val2}, [childrenReactComponents]);
</code></p>

<p>可以看出其中<code>TagName</code>是最安全的, 因为它在生成的JS中是一个字符串, 但是HTML Attribute就没有这么幸运了, 如果它碰巧是一个Javascript关键字, 那么恭喜你, 你掉到坑里去了. 比如上例中<code>label</code>上面的<code>for</code>属性在被编译后的Javascript代码中就很可能被浏览器当作是<em>循环</em>的那个for, 从而报出一个语法错误出来.</p>

<p>为了解决类似这种问题, React为这些"不幸"的属性定义了对应的"替身", 它们中的一些是(不完全版):</p>

<table>
<thead>
<tr>
<th align="left">Native HTML Attribute </th>
<th align="left"> React Version </th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><code>for</code>                 </td>
<td align="left"> <code>htmlFor</code>       </td>
</tr>
</tbody>
</table>


<p>(未完待续...)</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Feng erdong's Blog]]></title>
  <link href="http://fedcuit.github.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://fedcuit.github.com/"/>
  <updated>2015-06-10T17:31:14+08:00</updated>
  <id>http://fedcuit.github.com/</id>
  <author>
    <name><![CDATA[Feng erdong]]></name>
    <email><![CDATA[fedcuit@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何解决无法使用Python发送邮件的问题]]></title>
    <link href="http://fedcuit.github.com/blog/2015/04/06/problem-with-python-mail/"/>
    <updated>2015-04-06T22:01:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2015/04/06/problem-with-python-mail</id>
    <content type="html"><![CDATA[<p>这两天在玩Flask Web开发,其中讲到使用Flask Mail来发送邮件, 例子里面用的是Gmail的SMTP (Simple Mail Transter Protocal) 服务器, 我想国内的话还是用QQ邮箱方便一些吧,于是打开QQ邮箱的设置面板,找到如下的配置信息:</p>

<pre><code>接收邮件服务器：imap.qq.com，使用SSL，端口号993
发送邮件服务器：smtp.qq.com，使用SSL，端口号465或587
账户名：您的QQ邮箱账户名（如果您是VIP帐号或Foxmail帐号，账户名需要填写完整的邮件地址）
密码：您的QQ邮箱密码
电子邮件地址：您的QQ邮箱的完整邮件地址
</code></pre>

<p>兴高采烈地把这些配置写入程序, 执行一下代码, 没想到竟然报错了:</p>

<p><code>
ssl.SSLError: [Errno 1] _ssl.c:507: error:140770FC:SSL routines:SSL23_GET_SERVER_HELLO:unknown protocol
</code></p>

<p>一开始我以为需要在本机生成什么SSL证书之类的,不过上网搜了一圈发现,原来与程序本身无法,而是由于国内的这些邮件服务商(如网易, 腾讯)使用的SSL协议与python <code>smtplib</code>不兼容(真是坑爹呀). 无奈,只好搭上梯子去连Gmail了.</p>

<p>但接着还是报错了 :(</p>

<p>不过这次报的错信息量多多了:</p>

<p><code>
smtplib.SMTPAuthenticationError: (534, '5.7.14 &lt;https://accounts.google.com/ContinueSignIn?sarp=1&amp;scc=1&amp;plt=AKgnsbu_a\n5.7.14 jp4-nDDfH6fUTS8dQUeQfvPLhoMiYxCCT4CThSQuhcOJbzMUYI_QQZ44jUTB6FbPnYp8gv\n5.7.14 DEXJItt2gSz6WypV6cr7cZv9rpEprruo_JHXIBw6ZK3wjDKeSKKUKYMtpKoJUmARwONwcJ\n5.7.14 D3v5xypcAJtcazDB_WIUNCP8b3ZQl94GOTIKRvr7ASIgNuyD-rud8doBOTRnKpnLHbuc9B\n5.7.14 lZEGyzw&gt; Please log in via your web browser and then try again.\n5.7.14 Learn more at\n5.7.14 https://support.google.com/mail/bin/answer.py?answer=78754 hv7sm4775459pdb.86 - gsmtp')
</code></p>

<p>谷歌不愧是谷歌, 居然还在response里面给出了解决这个问题的网页,虽然是报错的,但是心里还是踏实多了,至少有响应了.</p>

<p>点开错误提示中的那个链接一看,里面列出了多个可能导致无法连接的原因, 一一分析了一下, 觉得这条嫌疑最大:</p>

<pre><code>您的邮件应用可能不支持最新的安全标准。了解如何让安全性较低的应用访问 Gmail 帐户。
</code></pre>

<p>转到"允许不够安全的应用"网页, 开启了让不够安全的应用访问Gmail的开关, 再次运行程序, 谢谢谷歌,邮件终于可以发出去了.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为单个文件添加Django支持]]></title>
    <link href="http://fedcuit.github.com/blog/2012/12/24/add-django-support-in-single-file/"/>
    <updated>2012-12-24T22:30:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2012/12/24/add-django-support-in-single-file</id>
    <content type="html"><![CDATA[<p>``` python
import os</p>

<h1>using your own django project settings module name(not file name)</h1>

<p>os.environ['DJANGO_SETTINGS_MODULE'] = "datawinners.settings"
```</p>

<pre><code>必须先完成`DJANGO_SETTINGS_MODULE`的配置，然后再使用Django提供的功能。
</code></pre>

<p>在配置<code>DJANGO_SETTINGS_MODULE</code>之前，需要先配置<code>PYTHONPATH</code>, Django在执行的时候会从<code>PYTHONPATH</code>中去查找<code>DJANGO_SETTINGS_MODULE</code>指定的模块。<code>PYTHONPATH</code>跟Java的<code>CLASSPATH</code>作用上是一样的.</p>

<p><code>bash
export PYTHONPATH="/home/twer/workspace/datawinners/datawinners"
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Built-in Functions]]></title>
    <link href="http://fedcuit.github.com/blog/2012/11/20/python-built-in/"/>
    <updated>2012-11-20T21:13:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2012/11/20/python-built-in</id>
    <content type="html"><![CDATA[<ul>
<li><code>cmp(x, y)</code></li>
</ul>


<h1>Attribute</h1>

<ul>
<li><code>delattr(object, name)</code><br/>
  <code>delattr(x, 'foobar')</code> is equivalent to <code>del x.foobar</code>.</li>
<li><code>getattr(object, name[, default])</code></li>
<li><code>setattr(object, name, value)</code></li>
<li><code>hasattr(object, name)</code></li>
<li><code>repr(object)</code><br/>
This is the same value yielded by conversions (reverse quotes).</li>
</ul>


<h1>Type</h1>

<ul>
<li><code>basestring</code><br/>
<code>isinstance(obj, *basestring*)</code> is equivalent to isinstance(obj, (str, unicode)).</li>
<li><code>isinstance(object, classinfo)</code></li>
<li><code>issubclass(class, classinfo)</code></li>
<li><code>super(type[, object-or-type])</code>
```python
class C(B):
  def method(self, arg):

<pre><code>  super(C, self).method(arg)
</code></pre>

<p>```</p></li>
<li><code>type(object)</code> <code>type(name, bases, dict)</code><br/>
With one argument, return the type of an object.<br/>
With three arguments, return a new type object.<br/>
```python

<h1>the following two statements create identical type objects</h1>

<p>class X(object):
  a = 1
X = type('X', (object,), dict(a=1))
```</p></li>
</ul>


<h1>Type Cast</h1>

<ul>
<li><code>unichr(i)</code></li>
<li><code>chr(i)</code><br/>
Return a string of one character whose ASCII code is the integer
```python
print chr(97)

<blockquote><blockquote><p>'a'
```</p></blockquote></blockquote></li>
<li><code>ord(c)</code></li>
<li><code>int(x)</code></li>
<li><code>hex(x)</code></li>
<li><code>float(x)</code></li>
<li><code>long(x)</code></li>
<li><code>oct(x)</code></li>
</ul>


<h2>Collection</h2>

<ul>
<li><code>tuple([iterable])</code><br/>
Return a tuple whose items are the same and in the same order as iterable‘s items.<br/>
<code>tuple</code> is an immutable sequence type.
```python
list1 = ['edfeng', 'tyzhang', 'zming']
tuple(list1)

<blockquote><blockquote><p>('edfeng', 'tyzhang', 'zming')
```</p></blockquote></blockquote></li>
<li><code>range(stop)</code>
<code>range(start, stop[, step])</code><br/>
If the start argument is omitted, it defaults to 0.</li>
<li><code>enumerate(sequence, start=0)</code><br/>
Return an enumerate object.
```
seasons = ['Spring', 'Summer', 'Fall', 'Winter']
list(enumerate(seasons))

<blockquote><blockquote><p>[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]
list(enumerate(seasons, start=1))
[(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]
```</p></blockquote></blockquote></li>
<li><code>reversed(seq)</code><br/>
Return a reverse <code>iterator</code>.</li>
<li><code>sorted(iterable[, cmp[, key[, reverse]]])</code><br/>
In general, the key and reverse conversion processes are much faster than specifying an equivalent cmp function.</li>
<li><code>next(iterator[, default])</code><br/>
Retrieve the next item from the iterator by calling its next() method.</li>
<li><p><code>iter(o[, sentinel])</code><br/>
Return an iterator object. If the second argument, sentinel, is given, then o must be a callable object. The iterator created in this case will call o with no arguments for each call to its next() method; if the value returned is equal to sentinel, StopIteration will be raised, otherwise the value will be returned.
```python
with open('mydata.txt') as fp:
  for line in iter(fp.readline, ''):</p>

<pre><code>  process_line(line)
</code></pre>

<p>```</p></li>
<li><p><code>filter(function, iterable)</code></p></li>
<li><code>map(function, iterable, ...)</code><br/>
Apply function to every item of iterable and return a list of the results.
```python
list1 = ['edfeng', 'tyzhang', 'zming']
list2 = [100, 50, 80]
map(lambda name, score : name + '-' + str(score), list1, list2)

<blockquote><blockquote><p>['edfeng-100', 'tyzhang-50', 'zming-80']
<code>
equivalent to this:
</code>python
list1 = ['edfeng', 'tyzhang', 'zming']
list2 = [100, 50, 80]
[name + '-' + str(score) for name, score in zip(list1, list2)]
['edfeng-100', 'tyzhang-50', 'zming-80']
```</p></blockquote></blockquote></li>
<li><code>reduce(function, iterable[, initializer])</code><br/>
<code>reduce</code> just like reduce function in couchdb, it takes a list and returns a single value.<br/>
<code>reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])</code> calculates <code>((((1+2)+3)+4)+5)</code>.</li>
<li><code>min()/max()</code>
<code>min(iterable[, key=func])</code><br/>
<code>min(arg1, arg2, *args[, key=func])</code>
```python
result = [('tester150411@gmail.com', '62', '624'), ('tester150411@gmail.com', '62', '528')]</li>
</ul>


<p>print "Max time:",
print max(result, key=lambda x: int(x[2]))</p>

<p>print "Min time:",
print min(result, key=lambda x: int(x[2]))
```</p>

<h1>Decorators</h1>

<ul>
<li><p><code>classmethod(function)</code><br/>
A class method receives the class as implicit first argument, just like an instance method receives the instance. To declare a class method, use this idiom:
<code>python
class C:
  @classmethod
  def f(cls, arg1, arg2, ...): ...
</code></p></li>
<li><p><code>staticmethod(function)</code><br/>
A static method does not receive an implicit first argument. To declare a static method, use this idiom:
<code>python
class C:
  @staticmethod
  def f(arg1, arg2, ...): ...
</code></p></li>
<li><code>property</code>
```python
class C(object):
  def <strong>init</strong>(self):

<pre><code>  self._x = None
</code></pre>

  # c.x will invoke this method
  @property
  def x(self):

<pre><code>  ""I'm the 'x' property.""
  return self._x
</code></pre>

  # c.x = value will invoke this method
  @x.setter
  def x(self, value):

<pre><code>  self._x = value
</code></pre>

  # del c.x will invoke this method
  @x.deleter
  def x(self):

<pre><code>  del self._x
</code></pre>

<p>```</p></li>
</ul>


<h1>Math</h1>

<ul>
<li><code>pow(x, y[, z])</code></li>
<li><code>sum(iterable[, start])</code></li>
</ul>


<h1>IO</h1>

<ul>
<li><p><code>print(*objects, sep=' ', end='\n', file=sys.stdout)</code>
```python
from <strong>future</strong> import print_function
print('a', 'b', 'c', sep='**')</p>

<blockquote><blockquote><p>a<strong>b</strong>c
```
  Note This function is not normally available as a built-in since the name print is recognized as the print statement. To disable the statement and use the print() function, use this future statement at the top of your module.</p></blockquote></blockquote></li>
<li><p><code>raw_input([prompt])</code>
Read from console
```python
s = raw_input('--> ')</p>

<blockquote><blockquote><p>--> Monty Python's Flying Circus
s
"Monty Python's Flying Circus"
```</p></blockquote></blockquote></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python中的时间与日期]]></title>
    <link href="http://fedcuit.github.com/blog/2012/09/24/date-time-in-python/"/>
    <updated>2012-09-24T21:17:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2012/09/24/date-time-in-python</id>
    <content type="html"><![CDATA[<ul>
<li><code>dateutil.parser.parse</code> 将一个日期字符串转换为带时区信息的日期对象
```python
from dateutil.parser import parse</li>
</ul>


<p>date = parse("08.10.2012" + " 00:00:00+0000", dayfirst=True)</p>

<blockquote><blockquote><blockquote><p>date
datetime.datetime(2012, 10, 8, 0, 0, tzinfo=tzutc())</p></blockquote></blockquote></blockquote>

<p>date = parse("08.10.2012" + " 00:00:00+0000", dayfirst=False)</p>

<blockquote><blockquote><blockquote><p>date
datetime.datetime(2012, 8, 10, 0, 0, tzinfo=tzutc())
```
<em>如果使用的python版本是2.x, 需要使用的python-dateutil的版本是1.x, python-dateutil 2.x版本需要python3.x支持</em></p></blockquote></blockquote></blockquote>

<ul>
<li><code>datetime.timedelta</code> 在日期对象上添加偏移量
```python
from datetime import timedelta</li>
</ul>


<blockquote><blockquote><blockquote><p>date
datetime.datetime(2012, 8, 10, 0, 0, tzinfo=tzutc())</p></blockquote></blockquote></blockquote>

<p>date = date + timedelta(days=1)</p>

<blockquote><blockquote><blockquote><p>date
datetime.datetime(2012, 8, 11, 0, 0, tzinfo=tzutc())</p></blockquote></blockquote></blockquote>

<p>date = date + timedelta(hours=1)</p>

<blockquote><blockquote><blockquote><p>date
datetime.datetime(2012, 8, 11, 1, 0, tzinfo=tzutc())
```</p></blockquote></blockquote></blockquote>

<ul>
<li><code>datetime.datetime.strptime</code> 将日期字符串转换为日期对象
```python
from datetime import datetime</li>
</ul>


<p>date = datetime.strptime('2012.08.10', '%Y.%m.%d')</p>

<blockquote><blockquote><blockquote><p>date
datetime.datetime(2012, 8, 10, 0, 0)
```</p></blockquote></blockquote></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常见的 python http library使用]]></title>
    <link href="http://fedcuit.github.com/blog/2012/08/04/python-http-lib/"/>
    <updated>2012-08-04T13:49:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2012/08/04/python-http-lib</id>
    <content type="html"><![CDATA[<ul>
<li>urllib2
``` python
import urllib2</li>
</ul>


<p>response = urllib2.urlopen('http://www.google.com')
response.read() #return content of requsted url in string format
```</p>
]]></content>
  </entry>
  
</feed>

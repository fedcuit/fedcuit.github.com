<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: view | Feng erdong's Blog]]></title>
  <link href="http://fedcuit.github.com/blog/categories/view/atom.xml" rel="self"/>
  <link href="http://fedcuit.github.com/"/>
  <updated>2015-06-04T12:23:18+08:00</updated>
  <id>http://fedcuit.github.com/</id>
  <author>
    <name><![CDATA[Feng erdong]]></name>
    <email><![CDATA[fedcuit@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Backbone体验 -- View篇]]></title>
    <link href="http://fedcuit.github.com/blog/2015/06/04/backbone-view/"/>
    <updated>2015-06-04T12:04:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2015/06/04/backbone-view</id>
    <content type="html"><![CDATA[<h2>View</h2>

<p>简单讲, <code>View</code>就是用来展示<code>Model</code>里面的数据的.</p>

<p>这样可以简单回顾一下我用过的一些前端JS框架是怎么处理数据展示的, 从最原始的jQuery开始:
只使用jQuery的时候, 当我们已经通过AJAX拿到数据之后, 我们可能需要先定位到需要显示数据的元素然后通过<code>el.val('...')</code>或者<code>el.text('...')</code>将数据手动设置上去. 当元素的值被更新之后需要将修改反应到后端时, 我们可能需要取到所有的元素的最新值然后发送到后台.</p>

<p>如上面那样通过操作对应的单个的DOM元素去设置值的方式写起来很繁琐, 如果返回的数据里面有十几甚至几十个条目的话, 写出来的代码更是毫无美感可言, 于是人们想到了使用JS<code>模板</code>, 通过一段通常是写在<code>&lt;head&gt;&lt;/head&gt;</code>中<code>&lt;script type="text/template" id="myTemplate"&gt;...&lt;/script&gt;</code>来表示最终要后面的HTML的结构, 在其中使用占位符来标识哪里部分需要被真正传入的数据替换. 模板定义好之后, 当拿到AJAX的返回结果时, 我们只需要将数据填充到这个模板, 然后将生成的HTML添加到页面中就可以了, 一句话就可以搞定, 比如 <code>$container.html(_.template($('#myTemplate'), ajaxReponseData))</code>. 比较常用的模板引擎有<code>mustache</code>, <code>underscore template</code></p>

<p>事情发展到这里还没完, 现在数据显示的问题解决的差不多了, 但是如果用户将某些DOM元素的值修改之后, 我们还需要将所有的元素的值读取一遍, 然后将这些值发送到后台去更新这条记录. 我们通过模板技术解决了繁琐的DOM设值, 但是数据的更新还是一个问题.</p>

<p>一起来看看Backbone的<code>View</code>是如何解决这个问题.</p>

<p>首先我们需要定义一个Backbone <code>View</code>, 定义的方法与<code>Model</code>非常的类似, 只需要继承'View`就可以了:
``` javascript
TodoItemView = Backbone.View.extend({</p>

<pre><code>template: _.template($("#todoItemTemplate").html()),
initialize: function () {
    this.render();
},
render: function () {
    return this.$el.html(this.template(this.model.attributes));
},
events: {
    "click .toggle": "handleToggle",
    "click .destroy": "handleDestroy"
},
handleToggle: function () {
    this.model.set('completed', this.$('.toggle').prop('checked'));
}
</code></pre>

<p>}
<code>``
与上面提到的方式不同, Backbone</code>View<code>实现了细粒度的数据更新, 通过对对应的组件进行事件监听, 当某个组件的值被修改时, 只需要将被修改的属性更新到</code>Model`中.</p>

<p>下面介绍一下<code>View</code>中比较重要的几个属性(钩子):</p>

<ul>
<li><p><code>initialize</code></p>

<p>  通常在这个属性对应的方法里面去生成最初的视图, 如上例中所求, 在<code>initialize</code>方法中将模板填充之后添加到<code>View</code>对应的HTML容器中.</p></li>
<li><p><code>el</code></p>

<p>  这个属性通常是一个<em>css selector</em>, 对应页面中这个<code>View</code>将被添加到HTML元素, 可以理解成是这个<code>View</code>的container, 个人理解是在创建Backbone <code>Collection</code>, <code>View</code>, <code>Model</code>的实例的时候, 都可以向其中传入一个对象, 这个对象的属性会与定义时的那些属性进行merge. 所以<code>el</code>既可以声明在<code>View</code>类的定义中, 也可以通过参加传入, 如 <code>var todoItemView = new TodoItemView({el: jQuery('.todoItem'});</code>
  在<code>View</code>内部使用的时候, 通常是通过<code>this.$el</code>来操作这个容器, <code>this.$el</code>将会引用你配置的<code>el</code>对应的jQuery对象.
  除了<code>el</code>之外, 还有一些其他的属性也是跟<code>View</code>的容器相关的:</p>

<ul>
<li><code>tagName</code></li>
<li><code>className</code></li>
</ul>


<p>  如果没有配置<code>View</code>的<code>el</code>属性, 那么默认将使用一个<code>DIV</code>来包装<code>View</code>的内容, 这时候如果配置了<code>tagName</code>, 那么就会使用<code>&lt;tagName&gt;&lt;/tagName&gt;</code>来包装, 如果还有<code>className</code>的话, 那就变成了<code>&lt;tagName class="valueOfClassNameProp"&gt;&lt;/tagName&gt;</code></p></li>
<li><p><code>this.$('css selector')</code></p>

<p>  一开始我也比较疑惑<code>this.$()</code>与<code>$()</code>有什么区别, 看了源码之后才发现原来<code>this.$()</code>是在当时<code>View</code>的范围内查找元素, 是个挺实用的方法.
<code>javascript
$: function(selector) {
return this.$el.find(selector);
},
</code></p></li>
<li><p><code>events</code></p>

<p>  这个属性应该是<code>View</code>所特有的, 它里面定义了一组元素上可能发生的事件以及对应的处理方法, 如:
<code>javascript
events: {
  "click .toggle": "handleToggle",
  "click .destroy": "handleDestroy"
},
handleToggle: function () {
  this.model.set('completed', this.$('.toggle').prop('checked'));
}
</code>
 如在<code>.toggle</code>元素上点击时会执行<code>handleToggle</code>方法. 这种事件监听方式其实与<code>jQuery.on()</code>非常的类似:</p>

<ul>
<li><code>jQuery.on(eventType, selector, handler)</code></li>
<li><code>"eventType selector": "handler"</code></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes of Definitive guide to couchdb - CHAPTER 21 View Cookbook for SQL Jockeys]]></title>
    <link href="http://fedcuit.github.com/blog/2012/10/27/definitive-guide-to-couchd-chapter21/"/>
    <updated>2012-10-27T21:41:00+08:00</updated>
    <id>http://fedcuit.github.com/blog/2012/10/27/definitive-guide-to-couchd-chapter21</id>
    <content type="html"><![CDATA[<h2>Defining a View</h2>

<p>Defining a view is done by creating a special document in a CouchDB database. The only real specialness is the <code>_id</code> of the document, which starts with <code>_design/</code> —for example, <code>_design/application</code>. Other than that, it is just a regular CouchDB document.</p>

<h2>Querying a View</h2>

<p>/database/<em>design/application/</em>view/viewname</p>

<h2>Map Function</h2>

<p>A map function may call the built-in <code>emit(key, value)</code> function 0 to N  times per document, creating a row in the map result per invocation.</p>

<p>(a map function can return any counts of emit(key, value) call)</p>

<h2>Look up by key</h2>

<p>To look something up quickly, regardless of the storage mechanism, an index is needed.  An index is a data structure optimized for quick search and retrieval. CouchDB’s map result is stored in such an index, which happens to be a B+ tree.</p>

<p>(couchdb will generate a file with name xxxx.view to store the result of map/reduce function, it will copy the desired data from documents to the view file, not just reference it, so a view file may be very large)</p>

<p>Query: <code>/ladies/_design/ladies/_view/age?key=5</code></p>

<p>Result:
``` javascript
{</p>

<pre><code>"total_rows":3,
    "offset":1,
    "rows":[
    {"id":"fc2636bf50556346f1ce46b4bc01fe30","key":5,"value":"Lena"}
]
</code></pre>

<p>}
```</p>

<p><code>total_rows</code>: how many documents are there in this view result<br/>
<code>offset</code>: position/index of this document/the first document in this view result</p>

<h2>Aggregation Function</h2>

<ul>
<li>Reduce functions are similar to aggregate functions in SQL. They compute a value over multiple documents.</li>
<li>Reduce functions operate on the output of the map function (also called the map result  or intermediate result ).</li>
<li>This reduce function takes two arguments: a list of keys  and a list of values .</li>
<li>You’ll see one difference between the map and the reduce function. The map function uses emit() to create its result, whereas the reduce function returns a value.</li>
</ul>


<p>The result for a reduce view may looks like this:
``` javascript
{</p>

<pre><code>"rows":[
{"key":null,"value":15}
]
</code></pre>

<p>}
```</p>

<h2>Get Unique Values</h2>

<p>The map result will look like this:
``` javascript
{"total_rows":9,"offset":0,"rows":[</p>

<pre><code>{"id":"3525ab874bc4965fa3cda7c549e92d30","key":"bike","value":null},
    {"id":"3525ab874bc4965fa3cda7c549e92d30","key":"couchdb","value":null},
    {"id":"53f82b1f0ff49a08ac79a9dff41d7860","key":"couchdb","value":null},
    {"id":"da5ea89448a4506925823f4d985aabbd","key":"couchdb","value":null},
    {"id":"3525ab874bc4965fa3cda7c549e92d30","key":"drums","value":null},
    {"id":"53f82b1f0ff49a08ac79a9dff41d7860","key":"hypertext","value":null},
    {"id":"da5ea89448a4506925823f4d985aabbd","key":"music","value":null},
    {"id":"da5ea89448a4506925823f4d985aabbd","key":"mustache","value":null},
    {"id":"53f82b1f0ff49a08ac79a9dff41d7860","key":"philosophy","value":null}
]
</code></pre>

<p>}
```</p>

<ul>
<li>Couchdb doesn’t have a keyword like <code>distinct</code>, but we can use <code>group</code> query parameter to group the result of reduce function, as we mentioned in last section, a reduce function only returns one value, but when we add <code>group=true</code> query parameter, multi values will be returned(each value is the reduce result of according group), grouped by the key in keys list, in this way, we can get the distinct keys(in this case, distinct tags)</li>
<li>Coucdb reduce result by default discard keys, so in the reduce result, key always be null, but if we add group=true in query, key will be used to grouping, so key will be reserved.</li>
<li><code>group=true</code> parameter can only be used on a view which has reduce function.</li>
<li>if a view has a reduce function, by default a query will return the result of reduce. we can explicit pass <code>reduce=false</code> to get map result instead of reduce result.</li>
</ul>

]]></content>
  </entry>
  
</feed>
